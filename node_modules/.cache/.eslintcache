[{"/Users/minhyeok/Desktop/LostarkTodo/Front/src/index.js":"1","/Users/minhyeok/Desktop/LostarkTodo/Front/src/reportWebVitals.js":"2","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/SignUp.jsx":"3","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/Todo.jsx":"4","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/TodoSortForm.jsx":"5","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/Login.jsx":"6","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/Info.jsx":"7","/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/LinearIndeterminate.jsx":"8","/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/Navbar.jsx":"9","/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/Notification.jsx":"10","/Users/minhyeok/Desktop/LostarkTodo/Front/src/service/api-service.jsx":"11","/Users/minhyeok/Desktop/LostarkTodo/Front/src/config/api-config.jsx":"12","/Users/minhyeok/Desktop/LostarkTodo/Front/src/App.jsx":"13","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/SocialLogin.jsx":"14","/Users/minhyeok/Desktop/LostarkTodo/Front/src/comments/Comments.js":"15","/Users/minhyeok/Desktop/LostarkTodo/Front/src/comments/CommentForm.js":"16","/Users/minhyeok/Desktop/LostarkTodo/Front/src/comments/Commnet.js":"17","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/Setting.jsx":"18","/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/BasicSpeedDial.jsx":"19","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/TodoTest.jsx":"20"},{"size":242,"mtime":1694332041421,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1694195401976,"results":"23","hashOfConfig":"22"},{"size":2560,"mtime":1695129172765,"results":"24","hashOfConfig":"22"},{"size":42943,"mtime":1696387232783,"results":"25","hashOfConfig":"22"},{"size":4359,"mtime":1693989921554,"results":"26","hashOfConfig":"22"},{"size":886,"mtime":1695007281767,"results":"27","hashOfConfig":"22"},{"size":4985,"mtime":1696229914343,"results":"28","hashOfConfig":"22"},{"size":278,"mtime":1694079325411,"results":"29","hashOfConfig":"22"},{"size":4649,"mtime":1696386255469,"results":"30","hashOfConfig":"22"},{"size":867,"mtime":1694079266240,"results":"31","hashOfConfig":"22"},{"size":1807,"mtime":1694414095966,"results":"32","hashOfConfig":"22"},{"size":314,"mtime":1694197250194,"results":"33","hashOfConfig":"22"},{"size":1093,"mtime":1696333727810,"results":"34","hashOfConfig":"22"},{"size":869,"mtime":1694353634665,"results":"35","hashOfConfig":"22"},{"size":4799,"mtime":1696229939611,"results":"36","hashOfConfig":"22"},{"size":972,"mtime":1695565549405,"results":"37","hashOfConfig":"22"},{"size":3437,"mtime":1696232408847,"results":"38","hashOfConfig":"22"},{"size":5834,"mtime":1696222341463,"results":"39","hashOfConfig":"22"},{"size":1631,"mtime":1696220050505,"results":"40","hashOfConfig":"22"},{"size":46995,"mtime":1696387013712,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"5l2mm0",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},"/Users/minhyeok/Desktop/LostarkTodo/Front/src/index.js",[],[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/reportWebVitals.js",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/SignUp.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/Todo.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/TodoSortForm.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/Login.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/Info.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/LinearIndeterminate.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/Navbar.jsx",["107"],[],"import * as React from 'react';\nimport './Navbar.css';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport MenuItem from '@mui/material/MenuItem';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport MoreIcon from '@mui/icons-material/MoreVert';\nimport Menu from '@mui/material/Menu';\nimport { logout } from '../service/api-service';\n\nexport default function Navbar() {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\n\n  const isMenuOpen = Boolean(anchorEl);\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n  const handleProfileMenuOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMobileMenuClose = () => {\n    setMobileMoreAnchorEl(null);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    handleMobileMenuClose();\n  };\n\n  const handleMobileMenuOpen = (event) => {\n    setMobileMoreAnchorEl(event.currentTarget);\n  };\n\n\n\n  const menuId = 'primary-search-account-menu';\n  const renderMenu = (\n    (localStorage.getItem(\"ACCESS_TOKEN\") !== null && localStorage.getItem(\"ACCESS_TOKEN\") !== \"null\") && (\n      <Menu\n        sx={{ mt: '35px' }}\n        anchorEl={anchorEl}\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        id={menuId}\n        keepMounted\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        open={isMenuOpen}\n        onClose={handleMenuClose}\n      >\n        <MenuItem onClick={logout}>Logout</MenuItem>\n      </Menu>\n    )\n  );\n\n\n\n  const mobileMenuId = 'primary-search-account-menu-mobile';\n  const renderMobileMenu = (\n    <Menu\n      anchorEl={mobileMoreAnchorEl}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n      id={mobileMenuId}\n      keepMounted\n      transformOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n      open={isMobileMenuOpen}\n      onClose={handleMobileMenuClose}\n    >\n      <MenuItem onClick={logout}>Logout</MenuItem>\n    </Menu>\n  );\n\n  return (\n    <>\n      <Box sx={{ flexGrow: 1, backgroundColor: \"#000\", fontWeight: \"bold\", color: \"white\", textAlign: \"center\", paddingBottom: 0.5, paddingTop: 0.5 }}>\n        <span className='notification'>주간숙제 관리 개발중인 버전은 \"테스트\"탭에서 체험해보실 수 있습니다. </span>\n      </Box>\n      <Box sx={{ flexGrow: 1 }}>\n        <AppBar position=\"static\" color='inherit' style={{backgroundColor: \"rgb(230, 230, 230)\"}}>\n          <Toolbar>\n            <MenuItem onClick={() => (window.location.href = \"/\")}>\n              <img src='/logo.png' style={{ width: 150 }} />\n            </MenuItem>\n            <MenuItem onClick={() => (window.location.href = \"/comments\")}>\n              <p>방명록</p>\n            </MenuItem>\n            <MenuItem onClick={() => (window.location.href = \"/test\")}>\n              <p>테스트</p>\n            </MenuItem>\n            <Box sx={{ flexGrow: 1 }} />\n            <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n              {/* <IconButton size=\"large\" aria-label=\"show 4 new mails\" color=\"inherit\">\n              <Badge badgeContent={4} color=\"error\">\n                <MailIcon />\n              </Badge>\n            </IconButton>\n            <IconButton\n              size=\"large\"\n              aria-label=\"show 17 new notifications\"\n              color=\"inherit\"\n            >\n              <Badge badgeContent={17} color=\"error\">\n                <NotificationsIcon />\n              </Badge>\n            </IconButton> */}\n              <IconButton\n                size=\"large\"\n                edge=\"end\"\n                aria-label=\"account of current user\"\n                aria-controls={menuId}\n                aria-haspopup=\"true\"\n                onClick={handleProfileMenuOpen}\n                color=\"inherit\"\n              >\n                <AccountCircle />\n              </IconButton>\n            </Box>\n            <Box sx={{ display: { xs: 'flex', md: 'none' } }}>\n              <IconButton\n                size=\"large\"\n                aria-label=\"show more\"\n                aria-controls={mobileMenuId}\n                aria-haspopup=\"true\"\n                onClick={handleMobileMenuOpen}\n                color=\"inherit\"\n              >\n                <MoreIcon />\n              </IconButton>\n            </Box>\n          </Toolbar>\n        </AppBar>\n        {renderMobileMenu}\n        {renderMenu}\n      </Box>\n\n    </>\n  );\n}","/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/Notification.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/service/api-service.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/config/api-config.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/App.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/SocialLogin.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/comments/Comments.js",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/comments/CommentForm.js",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/comments/Commnet.js",["108"],[],"import CommentForm from \"./CommentForm\";\n\nconst Comment = ({\n  comment,\n  replies,\n  setActiveComment,\n  activeComment,\n  updateComment,\n  deleteComment,\n  addComment,\n  parentId = null,\n  currentUser\n}) => {\n  const isEditing =\n    activeComment &&\n    activeComment.id === comment.id &&\n    activeComment.type === \"editing\";\n  const isReplying =\n    activeComment &&\n    activeComment.id === comment.id &&\n    activeComment.type === \"replying\";\n  const canDelete =\n    (currentUser.username === comment.username && replies.length === 0);\n  const canReply = (currentUser.role === \"ADMIN\") || (currentUser.username === comment.username);\n  const canEdit = currentUser.username === comment.username;\n  const replyId = parentId ? parentId : comment.id;\n  const lastModifiedDate = new Date(comment.lastModifiedDate).toLocaleString();\n  const username = comment.role === \"ADMIN\"? \"관리자\" : comment.username.substring(0, 5) + '*'.repeat(comment.username.length - 5);\n\n  return (\n    <div key={comment.id} className=\"comment\">\n      <div className=\"comment-image-container\">\n        <img src=\"/user-icon.png\" />\n      </div>\n      <div className=\"comment-right-part\">\n        <div className=\"comment-content\">\n          <div>\n            <span className=\"comment-author\"\n              style={{color: comment.role === \"ADMIN\" ?  \"blue\" : \"WHITE\"}}\n            >{username}</span>({lastModifiedDate})\n          </div>\n        </div>\n        {!isEditing && <div className=\"comment-text\">{comment.body}</div>}\n        {isEditing && (\n          <CommentForm\n            submitLabel=\"Update\"\n            hasCancelButton\n            initialText={comment.body}\n            handleSubmit={(text) => updateComment(text, comment.id)}\n            handleCancel={() => {\n              setActiveComment(null);\n            }}\n          />\n        )}\n        <div className=\"comment-actions\">\n          {canReply && (\n            <div\n              className=\"comment-action\"\n              onClick={() =>\n                setActiveComment({ id: comment.id, type: \"replying\" })\n              }\n            >\n              Reply\n            </div>\n          )}\n          {canEdit && (\n            <div\n              className=\"comment-action\"\n              onClick={() =>\n                setActiveComment({ id: comment.id, type: \"editing\" })\n              }\n            >\n              Edit\n            </div>\n          )}\n          {canDelete && (\n            <div\n              className=\"comment-action\"\n              onClick={() => deleteComment(comment.id)}\n            >\n              Delete\n            </div>\n          )}\n        </div>\n        {isReplying && (\n          <CommentForm\n            submitLabel=\"Reply\"\n            handleSubmit={(text) => addComment(text, replyId)}\n          />\n        )}\n        {replies.length > 0 && (\n          <div className=\"replies\">\n            {replies.map((reply) => (\n              <Comment\n                comment={reply}\n                key={reply.id}\n                setActiveComment={setActiveComment}\n                activeComment={activeComment}\n                updateComment={updateComment}\n                deleteComment={deleteComment}\n                addComment={addComment}\n                parentId={comment.id}\n                replies={[]}\n                currentUser={currentUser}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Comment;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/Setting.jsx",[],[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/BasicSpeedDial.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/TodoTest.jsx",["109"],[],"import React, { useState, useEffect } from \"react\";\nimport './Todo.css';\nimport { call } from \"../service/api-service\";\nimport Typography from \"@mui/material/Typography\";\nimport SearchIcon from '@mui/icons-material/Search';\nimport Modal from \"@mui/material/Modal\";\nimport SaveIcon from '@mui/icons-material/Save';\nimport DoneIcon from '@mui/icons-material/Done';\nimport CloseIcon from '@mui/icons-material/Close';\nimport {\n    GridContextProvider,\n    GridDropZone,\n    GridItem,\n    swap,\n} from \"react-grid-dnd\";\nimport { Grid } from \"@mui/material\";\nimport Notification from '../fragments/Notification';\nimport LinearIndeterminate from '../fragments/LinearIndeterminate';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport AddBoxIcon from '@mui/icons-material/AddBox';\nimport Button from '@mui/material/Button';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Fade from '@mui/material/Fade';\nimport BasicSpeedDial from '../fragments/BasicSpeedDial';\nimport Box from '@mui/material/Box';\n\n\nexport default function TodoTest() {\n    const [characters, setCharacters] = useState([]); //캐릭터 리스트\n    const [servers, setServers] = useState([]); //서버 리스트\n    const [selectedServer, setSelectedServer] = useState(null);\n\n    //------------------------- 페이지 로드시 호출 -------------------------\n    useEffect(() => {\n        // 서버 정보 불러오기\n        call(\"/member/characterList/server\", \"GET\", null)\n            .then((response) => {\n                setServers(response);\n                // 서버 정보가 로드된 후 첫 번째 서버 정보를 사용하여 캐릭터 정보 불러오기\n                const firstServerName = Object.keys(response)[0];\n                setSelectedServer(firstServerName);\n                call(\"/member/characterList-v3/\" + firstServerName, \"GET\", null)\n                    .then((characterResponse) => {\n                        setCharacters(characterResponse);\n                        console.log(characterResponse);\n                    })\n\n            })\n            .catch((error) => {\n                if (error.errorMessage[0] === \"등록된 캐릭터가 없습니다.\") {\n                    window.location.href = \"/signup\";\n                } else {\n                    alert(error.errorMessage);\n                    localStorage.setItem(\"ACCESS_TOKEN\", null);\n                    window.location.href = \"/login\";\n                }\n            });\n\n\n\n        // 반응형 사이트\n        function handleResize() {\n            setItemsPerRow(calculateItemsPerRow());\n        }\n\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    //------------------------- 일일 수익 & 주간 수익 관련 -------------------------\n    //1. 예상 일일 수익\n    const totalDayGold = characters.reduce((accumulator, character) => {\n        if (character.settings.showChaos) {\n            accumulator += character.chaosGold;\n        }\n        if (character.settings.showGuardian) {\n            accumulator += character.guardianGold;\n        }\n        return accumulator;\n    }, 0);\n\n    //2. 일일 수익\n    const getDayGold = characters.reduce((accumulator, character) => {\n        if (character.chaosCheck === 2) {\n            accumulator += character.chaosGold;\n        }\n        if (character.guardianCheck === 1) {\n            accumulator += character.guardianGold;\n        }\n        return accumulator;\n    }, 0);\n\n    //3. 예상 주간 수익\n    const totalWeekGold = characters.reduce((accumulator, character) => {\n        if (character.goldCharacter) {\n            character.todoList.forEach((todo) => {\n                accumulator += todo.gold;\n            });\n        }\n        return accumulator;\n    }, 0);\n\n    //4. 주간 수익\n    const getWeekGold = characters.reduce((accumulator, character) => {\n        if (character.goldCharacter) {\n            character.todoList.map((todo) => {\n                if (todo.check === true) {\n                    accumulator += todo.gold;\n                }\n                return null;\n            });\n        }\n        return accumulator;\n    }, 0);\n\n    //------------------------- 일일 숙제 관련 -------------------------\n    //1. 에포나의뢰 체크 \n    const handleEponaCheck = (characterId) => {\n        const updatedCharacters = characters.map((character) => {\n            if (character.id === characterId) {\n                character.eponaCheck = !character.eponaCheck;\n                const updateContent = {\n                    characterName: character.characterName,\n                    eponaCheck: character.eponaCheck,\n                    chaosCheck: character.chaosCheck,\n                    guardianCheck: character.guardianCheck,\n                };\n                call(\"/character/check\", \"PATCH\", updateContent).then((response) => { });\n            }\n            return character;\n        });\n\n        setCharacters(updatedCharacters);\n    };\n\n\n    //2.카오스던전 체크 \n    const handleChaosCheck = (characterId) => {\n        const updatedCharacters = characters.map((character) => {\n            if (character.id === characterId) {\n                if (character.chaosCheck === 0) {\n                    character.chaosCheck = 1;\n                } else if (character.chaosCheck === 1) {\n                    character.chaosCheck = 2;\n                } else if (character.chaosCheck === 2) {\n                    character.chaosCheck = 0;\n                }\n                const updateContent = {\n                    characterName: character.characterName,\n                    eponaCheck: character.eponaCheck,\n                    chaosCheck: character.chaosCheck,\n                    guardianCheck: character.guardianCheck,\n                };\n                call(\"/character/check\", \"PATCH\", updateContent).then((response) => { });\n            }\n            return character;\n        });\n        setCharacters(updatedCharacters);\n    };\n\n\n    //3. 가디언토벌 체크\n    const handleGuardianCheck = (characterId) => {\n        const updatedCharacters = characters.map((character) => {\n            if (character.id === characterId) {\n                if (character.guardianCheck === 0) {\n                    character.guardianCheck = 1;\n                } else {\n                    character.guardianCheck = 0;\n                }\n                const updateContent = {\n                    characterName: character.characterName,\n                    eponaCheck: character.eponaCheck,\n                    chaosCheck: character.chaosCheck,\n                    guardianCheck: character.guardianCheck,\n                };\n                call(\"/character/check\", \"PATCH\", updateContent).then((response) => { });\n            }\n            return character;\n        });\n        setCharacters(updatedCharacters);\n    };\n\n\n    //-------------------------디자인 관련 -------------------------\n    //1.반응형 사이트를 위한 메소드 -> 창 크기에 맞게 조절\n    const [itemsPerRow, setItemsPerRow] = useState(calculateItemsPerRow());\n    function calculateItemsPerRow() {\n        var screenWidth = window.innerWidth;\n        if (screenWidth >= 1300) {\n            screenWidth = 1300;\n        }\n        const width = 250;\n        const row = 2;\n        if (screenWidth > width * row) {\n            return Math.ceil(screenWidth / width);\n        } else {\n            return row;\n        }\n    }\n\n    //2.순서 변경 캐릭터 리스트 저장\n    const [itemsSwapState, setItemsSwapState] = useState(false);\n    function onChange(sourceId, sourceIndex, targetIndex, targetId) {\n        setItemsSwapState(true);\n        const nextState = swap(characters, sourceIndex, targetIndex);\n        for (let i = 0; i < nextState.length; i++) {\n            nextState[i].sortNumber = i;\n        }\n        setCharacters(nextState);\n    }\n\n    //3.순서 변경 DB저장\n    const saveSort = () => {\n        setShowLinearProgress(true);\n        call(\"/member/characterList/sorting\", \"PATCH\", characters)\n            .then((response) => {\n                setShowLinearProgress(false);\n                showMessage(\"순서 업데이트가 완료되었습니다.\");\n            });\n        setItemsSwapState(false);\n    };\n\n\n    //-------------------------캐릭터 데이터 업데이트 -------------------------\n    //2.캐릭터 휴식게이지 업데이트\n    const handleDayContentGuage = async (e, characterId, gaugeType) => {\n        e.preventDefault();\n        const newGaugeValue = window.prompt(`휴식게이지 수정`);\n\n        if (newGaugeValue !== null) {\n            const parsedValue = parseInt(newGaugeValue);\n            if (!isNaN(parsedValue)) {\n                const updatedCharacters = characters.map((character) => {\n                    if (character.id === characterId) {\n                        const updatedCharacter = {\n                            ...character,\n                            [`${gaugeType}Gauge`]: parsedValue,\n                        };\n\n                        const updateContent = {\n                            characterName: updatedCharacter.characterName,\n                            chaosGauge: updatedCharacter.chaosGauge,\n                            guardianGauge: updatedCharacter.guardianGauge,\n                            eponaGauge: updatedCharacter.eponaGauge,\n                        };\n\n                        setShowLinearProgress(true);\n\n                        return call(\"/character/gauge\", \"PATCH\", updateContent)\n                            .then((response) => {\n                                setShowLinearProgress(false);\n                                updatedCharacter.chaosGold = response.chaosGold;\n                                updatedCharacter.guardianGold = response.guardianGold;\n                                return updatedCharacter;\n                            })\n                            .catch((error) => {\n                                alert(error.errorMessage);\n                                return null;\n                            });\n                    }\n                    return character;\n                });\n                const updatedCharactersWithGold = await Promise.all(updatedCharacters);\n                setCharacters(updatedCharactersWithGold);\n            }\n        }\n    };\n\n    //3.캐릭터 주간숙제 추가 폼\n    const openAddTodoForm = (characterName, goldCharacter) => {\n        setModalTitle(characterName + \" 주간 숙제 관리\");\n        call(\"/character/week-v3/\" + characterName, \"GET\", null).then((response) => {\n            const todosByCategory = {};\n\n            response.forEach((todo) => {\n                if (!todosByCategory[todo.weekCategory]) {\n                    todosByCategory[todo.weekCategory] = {\n                        노말: [],\n                        하드: [],\n                    };\n                }\n                if (todo.weekContentCategory === '노말') {\n                    todosByCategory[todo.weekCategory]['노말'].push(todo);\n                } else {\n                    todosByCategory[todo.weekCategory]['하드'].push(todo);\n                }\n            });\n            console.log(todosByCategory);\n            const content = Object.entries(todosByCategory).map(\n                ([weekCategory, todos], index) => (\n                    <div key={index}>\n                        <p>{weekCategory}</p>\n                        <div className=\"week-category-wrap\" style={{ flexDirection: \"column\" }}>\n                            {Object.entries(todos).map(([weekContentCategory, todo], todoIndex) => (\n                                (todo.length > 0 &&\n                                    <div key={todoIndex} style={{ display: 'flex' }}>\n                                        <button\n                                            key={todo.id}\n                                            className={`${todo.checked === true ? \"done\" : \"\"}`}\n                                            onClick={() => updateWeekTodoAll(characterName, todo)}\n                                            style={{ backgroundColor: \"#F8E0E6\" }}\n                                        >\n                                            {weekContentCategory} ({todo.reduce((sum, todoItem) => sum + todoItem.gold, 0)}G)\n                                        </button>\n                                        {todo.map((todoItem) => (\n                                            <button\n                                                key={todoItem.id}\n                                                className={`${todoItem.checked === true ? \"done\" : \"\"}`}\n                                                onClick={() => updateWeekTodo(characterName, todoItem)}\n                                            >\n                                                {todoItem.gate}관문 ({todoItem.gold}G)\n                                            </button>\n                                        ))}\n                                    </div>\n                                )\n                            ))}\n                        </div>\n                    </div>\n                )\n            );\n\n            const modalContent = (\n                <div>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() => updateGoldCharacter(characterName)}\n                        style={{ cursor: \"pointer\" }}\n                    >\n                        골드 획득 캐릭터 지정 {goldCharacter ? \"해제\" : \"\"}\n                    </Button>\n                    {content}\n                </div>\n            );\n\n            setModalContent(modalContent);\n            setOpenModal(true);\n        });\n    };\n\n    //4.캐릭터 주간 숙제 업데이트(추가/삭제)\n    const updateWeekTodo = (characterName, content) => {\n        setShowLinearProgress(true);\n\n        const updatedCharacters = characters.map((character) => {\n            if (character.characterName === characterName) {\n                call(\"/character/week-v3/\" + characterName, \"POST\", content)\n                    .then((response) => {\n                        setShowLinearProgress(false);\n                        openAddTodoForm(characterName, response.goldCharacter);\n                        character.todoList = response.todoList;\n                    })\n                    .catch((error) => {\n                        alert(error.errorMessage);\n                        setShowLinearProgress(false);\n                    });\n            }\n            return character;\n        });\n        setCharacters(updatedCharacters);\n    };\n\n    //4-1.캐릭터 주간 숙제 업데이트 All (추가/삭제)\n    const updateWeekTodoAll = (characterName, content) => {\n        setShowLinearProgress(true);\n\n        const updatedCharacters = characters.map((character) => {\n            if (character.characterName === characterName) {\n                call(\"/character/week-v3-all/\" + characterName, \"POST\", content)\n                    .then((response) => {\n                        setShowLinearProgress(false);\n                        openAddTodoForm(characterName, response.goldCharacter);\n                        character.todoList = response.todoList;\n                    })\n                    .catch((error) => {\n                        setShowLinearProgress(false);\n                        alert(error.errorMessage);\n                    });\n            }\n            return character;\n        });\n        setCharacters(updatedCharacters);\n    };\n\n    //5.골드획득 캐릭터 업데이트\n    const updateGoldCharacter = (characterName) => {\n        setShowLinearProgress(true);\n        const updatedCharacters = characters.map((character) => {\n            if (character.characterName === characterName) {\n                call(\"/character/gold-character/\"+characterName, \"POST\", null)\n                    .then((response) => {\n                        setShowLinearProgress(false);\n                        character.goldCharacter = response.goldCharacter;\n                        setOpenModal(false);\n                    })\n                    .catch((error) => {\n                        alert(error.errorMessage);\n                        setShowLinearProgress(false);\n                    });\n            }\n            return character;\n        });\n\n        setCharacters(updatedCharacters);\n    };\n\n\n    // 캐릭터 주간숙제 체크\n    const updateWeekCheck = (characterId, todoId) => {\n        const updatedCharacters = characters.map((character) => {\n            if (character.id === characterId) {\n                const updatedTodoList = character.todoList.map((todo) => {\n                    if (todo.id === todoId) {\n                        const updateContent = {\n                            characterName: character.characterName,\n                            todoId: todoId,\n                            message: todo.check,\n                        };\n                        call(\"/character/week/check\", \"PATCH\", updateContent)\n                            .then((response) => { });\n                        return { ...todo, check: !todo.check };\n                    }\n                    return todo;\n                });\n                return { ...character, todoList: updatedTodoList };\n            }\n            return character;\n        });\n        setCharacters(updatedCharacters);\n    };\n\n    const updateWeekMessage = (characterId, todoId, message) => {\n        setShowLinearProgress(true);\n        const updatedCharacters = characters.map((character) => {\n            if (character.id === characterId) {\n                const updatedTodoList = character.todoList.map((todo) => {\n                    if (todo.id === todoId) {\n                        const updateContent = {\n                            characterName: character.characterName,\n                            todoId: todoId,\n                            message: message,\n                        };\n                        call(\"/character/week/message\", \"PATCH\", updateContent)\n                            .then((response) => {\n                                setShowLinearProgress(false);\n                                const inputFieldIcon = document.getElementById(\"input_field_icon_\" + todoId);\n                                if (response.message === \"\" || response.message === null) {\n                                    inputFieldIcon.style.display = \"block\";\n                                } else {\n                                    inputFieldIcon.style.display = \"none\";\n                                }\n                                const updatedTodo = { ...todo, message: response.message };\n                                return updatedTodo;\n                            })\n                            .catch((error) => {\n                                console.error(\"Error updating todo message:\", error.errorMessage);\n                                return todo; // Return the original todo in case of an error\n                            });\n                    }\n                    return todo;\n                });\n                return { ...character, todoList: updatedTodoList };\n            }\n            return character;\n        });\n\n        // Update the state outside the loop\n        setCharacters(updatedCharacters);\n    };\n\n    const changeShow = (todoId) => {\n        const inputField = document.getElementById(\"input_field_\" + todoId);\n        if (inputField.style.display === \"none\") {\n            inputField.style.display = \"block\";\n        } else {\n            inputField.style.display = \"none\";\n        }\n\n    }\n\n\n\n    /**\n     * 각종 정보창 모달 관련\n     */\n    // 모달 열기/닫기 상태 관리\n    const [openModal, setOpenModal] = useState(false);\n    const [modalContent, setModalContent] = useState(\"\");\n    const [modalTitle, setModalTitle] = useState(\"\");\n\n    // 모달 열기 함수\n    const openContentModal = (character, category) => {\n        setModalTitle(\"[\" + character + \"] \" + category + \" 평균 데이터\");\n\n        // 비동기 작업을 실행하고 작업이 완료되면 모달 컨텐츠를 업데이트하고 모달을 엽니다.\n        call(\"/character/day-todo/\" + character + \"/\" + category, \"GET\", null)\n            .then((response) => {\n                if (category === \"카오스던전\") {\n                    var modalContent = (\n                        <div>\n                            <ul>\n                                <p>이름 : {response.name}</p>\n                                ---거래 가능 재화---\n                                <li>파괴석 : {response.destructionStone}개</li>\n                                <li>수호석 : {response.guardianStone}개</li>\n                                <li>1레벨보석 : {response.jewelry}개</li>\n                                ---거래 불가 재화---\n                                <li>돌파석 : {response.leapStone}개</li>\n                                <li>실링 : {response.shilling}개</li>\n                                <li>파편 : {response.honorShard}개</li>\n                            </ul>\n                        </div>\n                    );\n                } else {\n                    modalContent = (\n                        <div>\n                            <ul>\n                                <p>이름 : {response.name}</p>\n                                ---거래 가능 재화---\n                                <li>파괴석 : {response.destructionStone}개</li>\n                                <li>수호석 : {response.guardianStone}개</li>\n                                <li>돌파석 : {response.leapStone}개</li>\n                            </ul>\n                        </div>\n                    );\n                }\n                setModalContent(modalContent);\n                setOpenModal(true);\n            })\n            .catch((error) => {\n                alert(error.errorMessage);\n            });\n    };\n\n\n    // 모달 닫기 함수\n    const closeContentModal = () => {\n        setOpenModal(false);\n        setModalTitle(\"\");\n        setModalContent(\"\");\n    };\n\n    //Notification 관련\n    const [openSnackbar, setOpenSnackbar] = useState(false);\n    const [snackbarMessage, setSnackbarMessage] = useState('');\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpenSnackbar(false);\n    };\n\n    const showMessage = (message) => {\n        setSnackbarMessage(message);\n        setOpenSnackbar(true);\n    };\n\n    const [showLinearProgress, setShowLinearProgress] = useState(false);\n\n\n    /**\n     * 서버별 보기\n     */\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const open = Boolean(anchorEl);\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n    const handleServerSelect = (serverName) => {\n        setSelectedServer(serverName);\n        handleClose();\n        call(\"/member/characterList/\" + serverName, \"GET\", null)\n            .then((characterResponse) => {\n                setCharacters(characterResponse);\n            })\n    };\n    const serverItems = Object.entries(servers).map(([serverName, count]) => (\n        <MenuItem key={serverName} value={serverName}\n            onClick={() => handleServerSelect(serverName)}>\n            {serverName}: {count}개\n        </MenuItem>\n    ));\n\n    // 도전 어비스/가디언 체크\n    const updateChallenge = (character, content) => {\n        setShowLinearProgress(true);\n        const updateContent = {\n            serverName: character.serverName,\n            content: content\n        };\n        call(\"/character/challenge\", \"PATCH\", updateContent)\n            .then((response) => {\n                setShowLinearProgress(false);\n                setCharacters(response);\n            });\n    }\n\n    return (\n        <>\n            {showLinearProgress && <LinearIndeterminate />}\n            <BasicSpeedDial\n                setShowLinearProgress={setShowLinearProgress}\n                setCharacters={setCharacters}\n                showMessage={showMessage} />\n            <Box sx={{ flexGrow: 1, backgroundColor: \"black\", fontWeight: \"bold\", color: \"white\", textAlign: \"center\", paddingBottom: 0.5, paddingTop: 0.5 }}>\n                <span>개발중인 주간숙제 관리 테스트 버전입니다. 생각보다 작업내용이 많아 시간이 걸릴거 같습니다. 최대한 빠르게 해보도록 노력하겠습니다(50% 정도 완료...?)</span>\n            </Box>\n            <div className=\"wrap\">\n                <div className=\"setting-wrap\">\n                    <div className=\"content-box\">\n                        <p>일일 수익</p>\n                        <p>{getDayGold.toFixed(2)} / <span style={{ color: \"black\" }}>&nbsp;{totalDayGold.toFixed(2)}</span>&nbsp;Gold </p>\n                    </div>\n                    <div className=\"content-box\">\n                        <p>주간 수익</p>\n                        <p>{getWeekGold.toLocaleString()} / <span style={{ color: \"black\" }}>&nbsp;{totalWeekGold.toLocaleString()}</span>&nbsp;Gold</p>\n                    </div>\n                    <Accordion style={{ backgroundColor: \"rgba(255, 255, 255, 50%)\", width: \"100%\", border: \"1px solid white\" }} className=\"sort-wrap\">\n                        <AccordionSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            style={{ borderRadius: \"5px\" }}\n                        >\n                            <Typography fontWeight={\"bold\"} display={\"flex\"}>캐릭터 순서 변경\n                                <SaveIcon\n                                    onClick={() => saveSort()}\n                                    sx={{ display: itemsSwapState ? \"flex\" : \"none\", marginLeft: \"5px\", color: \"blueviolet\", cursor: \"pointer\" }}\n                                >\n                                </SaveIcon>\n                            </Typography>\n                        </AccordionSummary>\n                        <AccordionDetails>\n                            <GridContextProvider onChange={onChange}>\n                                <GridDropZone\n                                    id=\"characters\"\n                                    boxesPerRow={itemsPerRow}\n                                    rowHeight={80}\n                                    style={{ height: 80 * Math.ceil(characters.length / itemsPerRow) }}\n                                >\n                                    {characters.map((character) => (\n                                        <GridItem key={character.sortNumber} style={{ width: `${100 / itemsPerRow}%` }}>\n                                            <div style={{ marginRight: 10 }}>\n                                                <div className=\"character-info-mini\"\n                                                    style={{\n                                                        backgroundImage: character.characterImage !== null ? `url(${character.characterImage})` : \"\",\n                                                        backgroundPosition: character.characterClassName === \"도화가\" || character.characterClassName === \"기상술사\" ? \"left 25px top -40px\" : \"left 25px top -20px\",\n                                                        backgroundColor: \"gray\", // imgurl이 없을시 배경색을 회색으로 설정\n                                                    }}>\n                                                    <p>{character.characterName}</p>\n                                                    <p>Lv. {character.itemLevel}</p>\n                                                </div>\n                                            </div>\n                                        </GridItem>\n                                    ))}\n                                </GridDropZone>\n                            </GridContextProvider>\n                        </AccordionDetails>\n                    </Accordion>\n                </div>\n                <div className=\"setting-wrap\">\n                    <div style={{ backgroundColor: \"#DA81F5\", borderRadius: 4, marginLeft: 5 }}>\n                        <Button\n                            id=\"fade-button\"\n                            aria-controls={open ? 'fade-menu' : undefined}\n                            aria-haspopup=\"true\"\n                            aria-expanded={open ? 'true' : undefined}\n                            onClick={handleClick}\n                            style={{ color: \"white\" }}\n                        >\n                            {selectedServer}: {servers[selectedServer]}개\n                        </Button>\n                        <Menu\n                            id=\"fade-menu\"\n                            MenuListProps={{\n                                'aria-labelledby': 'fade-button',\n                            }}\n                            anchorEl={anchorEl}\n                            open={open}\n                            onClose={handleClose}\n                            TransitionComponent={Fade}\n                        >\n                            {serverItems}\n                        </Menu>\n                    </div>\n                    <button\n                        className={`content-button ${characters.length > 0 && characters[0].challengeGuardian === true ? \"done\" : \"\"}`}\n                        onClick={() => updateChallenge(characters[0], \"Guardian\")}\n                        style={{ width: 120, marginLeft: 5 }}\n                    >\n                        도전 가디언 토벌\n                        <div className=\"content-button-text\">\n                            {characters.length > 0 && (characters[0]?.challengeGuardian === true ? <DoneIcon /> : \"\")}\n                        </div>\n                    </button>\n                    <button\n                        className={`content-button ${characters.length > 0 && characters[0].challengeAbyss === true ? \"done\" : \"\"}`}\n                        onClick={() => updateChallenge(characters[0], \"Abyss\")}\n                        style={{ width: 120, marginLeft: 5 }}\n                    >\n                        도전 어비스 던전\n                        <div className=\"content-button-text\">\n                            {characters.length > 0 && (characters[0]?.challengeAbyss === true ? <DoneIcon /> : \"\")}\n                        </div>\n                    </button>\n                </div>\n                <div className=\"todo-wrap\" >\n                    <Grid container spacing={1.5} overflow={\"hidden\"} style={{ marginBottom: 20 }}>\n                        {characters.map((character) => (\n                            <Grid key={character.sortNumber} item>\n                                <div className=\"character-wrap\">\n                                    <div className=\"character-info\"\n                                        style={{\n                                            backgroundImage: character.characterImage !== null ? `url(${character.characterImage})` : \"\",\n                                            backgroundPosition: character.characterClassName === \"도화가\" || character.characterClassName === \"기상술사\" ? \"left 10px top -80px\" : \"left 10px top -30px\",\n                                            backgroundColor: \"gray\", // 배경색을 회색으로 설정\n                                        }}>\n                                        <div className={character.goldCharacter ? \"gold-border\" : \"\"}>\n                                            {character.goldCharacter ? \"골드 획득 지정 캐릭터\" : \"\"}\n                                        </div>\n                                        <span>@{character.serverName}  {character.characterClassName}</span>\n                                        <h3 style={{ margin: 0 }}>{character.characterName}</h3>\n                                        <h2 style={{ margin: 0 }}>Lv. {character.itemLevel}</h2>\n                                    </div>\n                                    <div className=\"content-wrap\" style={{ display: character.settings.showEpona ? \"block\" : \"none\" }}>\n                                        <div className=\"content\">\n                                            <div\n                                                className={`${character.eponaCheck === true ? \"text-done\" : \"\"}`}>\n                                                <span>에포나의뢰 & 출석체크</span>\n                                            </div>\n                                            <button\n                                                className={`content-button ${character.eponaCheck === true ? \"done\" : \"\"}`}\n                                                onClick={() => handleEponaCheck(character.id)}\n                                            >\n                                                {character.eponaCheck === true ? <DoneIcon /> : <CloseIcon />}\n                                            </button>\n                                        </div>\n                                    </div>\n                                    <div className=\"content-wrap\" style={{ display: character.settings.showChaos ? \"block\" : \"none\" }}>\n                                        <div className=\"content\">\n                                            <div\n                                                className={`${character.chaosCheck === 2 ? \"text-done\" : \"\"}`}\n                                            >\n                                                <p>카오스던전</p>\n                                                <p>({character.chaosGold} gold)</p>\n                                            </div>\n                                            <SearchIcon onClick={() => openContentModal(character.characterName, \"카오스던전\")} style={{ cursor: \"pointer\" }} />\n                                            <button\n                                                className={`content-button ${character.chaosCheck === 0 ? \"\" :\n                                                    character.chaosCheck === 1 ? \"ing\" : \"done\"\n                                                    }`}\n                                                onClick={() => handleChaosCheck(character.id)}\n                                            >\n                                                {character.chaosCheck === 2 ? <DoneIcon /> : <CloseIcon />}\n                                            </button>\n                                        </div>\n                                        <div className=\"content\" style={{ height: 24, padding: 0, position: \"relative\", cursor: \"pointer\" }}\n                                            onContextMenu={(e) => handleDayContentGuage(e, character.id, \"chaos\")}\n                                            onClick={(e) => handleDayContentGuage(e, character.id, \"chaos\")}>\n                                            {Array.from({ length: 5 }, (_, index) => (\n                                                <div key={index} className=\"gauge-wrap\">\n                                                    <div\n                                                        className=\"gauge\"\n                                                        style={{ backgroundColor: index * 2 < character.chaosGauge / 10 ? \"#0ec0c3\" : undefined }}\n                                                    ></div>\n                                                    <div\n                                                        className=\"gauge\"\n                                                        style={{ backgroundColor: index * 2 + 1 < character.chaosGauge / 10 ? \"#0ec0c3\" : undefined }}\n                                                    ></div>\n                                                </div>\n                                            ))}\n                                            <span className=\"gauge-text\">\n                                                휴식게이지 : {character.chaosGauge}\n                                            </span>\n                                        </div>\n                                    </div>\n                                    <div className=\"content-wrap\" style={{ display: character.settings.showGuardian ? \"block\" : \"none\" }}>\n                                        <div className=\"content\">\n                                            <div\n                                                className={`${character.guardianCheck === 1 ? \"text-done\" : \"\"}`}\n                                            >\n                                                <p>가디언토벌</p>\n                                                <p>({character.guardianGold} gold)</p>\n                                            </div>\n                                            <SearchIcon onClick={() => openContentModal(character.characterName, \"가디언토벌\")} style={{ cursor: \"pointer\" }} />\n                                            <button\n                                                className={`content-button ${character.guardianCheck === 1 ? \"done\" : \"\"}`}\n                                                onClick={() => handleGuardianCheck(character.id)}\n                                            >\n                                                {character.guardianCheck === 1 ? <DoneIcon /> : <CloseIcon />}\n                                            </button>\n                                        </div>\n                                        <div className=\"content\" style={{ height: 24, padding: 0, position: \"relative\", cursor: \"pointer\" }}\n                                            onContextMenu={(e) => handleDayContentGuage(e, character.id, \"guardian\")}\n                                            onClick={(e) => handleDayContentGuage(e, character.id, \"guardian\")}>\n                                            {Array.from({ length: 5 }, (_, index) => (\n                                                <div key={index} className=\"gauge-wrap\">\n                                                    <div\n                                                        className=\"gauge\"\n                                                        style={{ backgroundColor: index * 2 < character.guardianGauge / 10 ? \"#0ec0c3\" : undefined }}\n                                                    ></div>\n                                                    <div\n                                                        className=\"gauge\"\n                                                        style={{ backgroundColor: index * 2 + 1 < character.guardianGauge / 10 ? \"#0ec0c3\" : undefined }}\n                                                    ></div>\n                                                </div>\n                                            ))}\n                                            <span className=\"gauge-text\">\n                                                휴식게이지 : {character.guardianGauge}\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"character-wrap\">\n                                    <div className=\"content\" style={{ padding: 0, display: character.settings.showWeekTodo ? \"block\" : \"none\" }}>\n                                        <button\n                                            className={\"content-button\"}\n                                            onClick={() => openAddTodoForm(character.characterName, character.goldCharacter)}\n                                            style={{ width: '101%', fontWeight: \"bold\", fontSize: 16 }}\n                                        >\n                                            주간숙제 관리\n                                        </button>\n                                    </div>\n                                    <div className=\"character-todo\">\n                                        {character.todoList.map((todo) => (\n                                            <div className=\"content-wrap\" key={todo.id}>\n                                                <div\n                                                    className=\"content\"\n                                                    style={{\n                                                        height: 35,\n                                                        position: \"relative\",\n                                                        justifyContent: \"space-between\",\n                                                        fontSize: 12,\n                                                        border: \"1px solid white\",\n                                                        borderRadius: 4\n                                                    }}\n                                                >\n                                                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\" }}>\n                                                        <div>\n                                                            {todo.message === null || todo.message === \"\" ? <AddBoxIcon id={\"input_field_icon_\" + todo.id} onClick={() => changeShow(todo.id)} /> : \"\"}\n                                                        </div>\n                                                        <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\" }}>\n                                                            <div\n                                                                className={`${todo.check === true ? \"text-done\" : \"\"}`}\n                                                                style={{ marginLeft: 2, width: \"100px\" }}\n                                                                dangerouslySetInnerHTML={{ __html: todo.name.replace(/\\n/g, \"<br />\") }}\n                                                            >\n                                                            </div>\n                                                            <div className={\"input-field\"} id={\"input_field_\" + todo.id} style={{ display: todo.message === null || todo.message === \"\" ? \"none\" : \"block\" }}>\n                                                                <input type=\"text\" spellCheck=\"false\" defaultValue={todo.message}\n                                                                    onBlur={(e) => updateWeekMessage(character.id, todo.id, e.target.value)}\n                                                                    onKeyDown={(e) => {\n                                                                        if (e.key === \"Enter\") {\n                                                                            updateWeekMessage(character.id, todo.id, e.target.value);\n                                                                            e.target.blur();\n                                                                        }\n                                                                    }}\n                                                                    placeholder=\"간단한 메모 추가\"\n                                                                />\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                    <button\n                                                        className={`content-button ${todo.check === true ? \"done\" : \"\"}`}\n                                                    // onClick={() => updateWeekCheck(character.id, todo.id)}\n                                                    >\n                                                        {character.goldCharacter ? todo.gold + \" G\" : \"\"}\n                                                        <div className=\"todo-button-text\">{todo.check === true ? <DoneIcon /> : \"\"}</div>\n                                                    </button>\n                                                </div>\n                                                <div className=\"content\" style={{ height: 16, padding: 0, position: \"relative\" }}>\n                                                    {Array.from({ length: todo.gate }, (_, index) => (\n                                                        <div key={`${todo.id}-${index}`} className=\"gauge-wrap\"\n                                                            style={{ backgroundColor: \"#0ec0c3\", width: 100 / todo.gate + \"%\", alignItems: \"center\", justifyContent: \"center\", color: \"black\" }}>\n                                                            <span>{index + 1}관문</span>\n                                                        </div>\n                                                    ))}\n                                                    <span className=\"gauge-text\"></span>\n                                                </div>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </div>\n\n                            </Grid>\n                        ))}\n                    </Grid>\n                </div>\n                {/* 모달 */}\n                <Modal\n                    open={openModal}\n                    onClose={closeContentModal}\n                    aria-labelledby=\"modal-title\"\n                    aria-describedby=\"modal-description\"\n                >\n                    <div style={{\n                        position: \"absolute\",\n                        top: \"50%\", left: \"50%\",\n                        transform: \"translate(-50%, -50%)\",\n                        backgroundColor: \"#dddddd\",\n                        padding: \"20px\", width: \"auto\", overflowY: \"auto\",\n                        maxHeight: 400\n                    }}>\n                        <Typography variant=\"h5\" id=\"modal-title\">\n                            {modalTitle}\n                        </Typography>\n                        <pre style={{ whiteSpace: \"pre-wrap\", wordWrap: \"break-word\", lineHeight: 2, fontWeight: \"bold\" }}>\n                            {modalContent}\n                        </pre>\n                    </div>\n                </Modal>\n            </div >\n\n            < Notification\n                message={snackbarMessage}\n                open={openSnackbar}\n                handleClose={handleSnackbarClose}\n            />\n        </>\n    );\n}\n",{"ruleId":"110","severity":1,"message":"111","line":95,"column":15,"nodeType":"112","endLine":95,"endColumn":61},{"ruleId":"110","severity":1,"message":"111","line":33,"column":9,"nodeType":"112","endLine":33,"endColumn":37},{"ruleId":"113","severity":1,"message":"114","line":415,"column":11,"nodeType":"115","messageId":"116","endLine":415,"endColumn":26},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'updateWeekCheck' is assigned a value but never used.","Identifier","unusedVar"]