[{"/Users/minhyeok/Desktop/LostarkTodo/Front/src/index.js":"1","/Users/minhyeok/Desktop/LostarkTodo/Front/src/reportWebVitals.js":"2","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/SignUp.jsx":"3","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/Login.jsx":"4","/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/LinearIndeterminate.jsx":"5","/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/Navbar.jsx":"6","/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/Notification.jsx":"7","/Users/minhyeok/Desktop/LostarkTodo/Front/src/service/api-service.jsx":"8","/Users/minhyeok/Desktop/LostarkTodo/Front/src/config/api-config.jsx":"9","/Users/minhyeok/Desktop/LostarkTodo/Front/src/App.jsx":"10","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/SocialLogin.jsx":"11","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/Setting.jsx":"12","/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/BasicSpeedDial.jsx":"13","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/member/ApiKeyUpdateForm.jsx":"14","/Users/minhyeok/Desktop/LostarkTodo/Front/src/icons/DiscordIcon.jsx":"15","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/friends/FriendWeekTodoWrap.jsx":"16","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/friends/FriendsWrap.jsx":"17","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/friends/FriendCubeWrap.jsx":"18","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/friends/FriendWeekEponaWrap.jsx":"19","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/friends/FriendSilmaelChangeWrap.jsx":"20","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/friends/FriendTodoWrap.jsx":"21","/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/AdsCard.js":"22","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/friends/FriendBasicSpeedDial.jsx":"23","/Users/minhyeok/Desktop/LostarkTodo/Front/src/apis/boards.js":"24","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/boards/BoardList.jsx":"25","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/boards/BoardInsertForm.jsx":"26","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/boards/Board.jsx":"27","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/search/SearchBox.jsx":"28","/Users/minhyeok/Desktop/LostarkTodo/Front/src/apis/api.js":"29","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/comments/CommentListContainer.jsx":"30","/Users/minhyeok/Desktop/LostarkTodo/Front/src/apis/comments.js":"31","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/comments/CommentList.jsx":"32","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/comments/CommentInsertForm.jsx":"33","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/comments/Comment.jsx":"34","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/todo/TodoContainer.jsx":"35","/Users/minhyeok/Desktop/LostarkTodo/Front/src/apis/todo.js":"36","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/TodoMain.jsx":"37","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/todo/TodoProfitsContainer.jsx":"38","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/TodoProfit.jsx":"39","/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/CircularLoading.jsx":"40","/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/PageNation.jsx":"41","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/TodoModal.jsx":"42","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/todo/TodoServerAndChallengeContainer.jsx":"43","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/TodoServerAndChallenge.jsx":"44","/Users/minhyeok/Desktop/LostarkTodo/Front/src/apis/friend.js":"45","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/todo/TodoContentWrapContainer.jsx":"46","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/TodoContentWrap.jsx":"47","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/todo/TodoWeekRaidContainer.jsx":"48","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/TodoWeekRaid.jsx":"49","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/todo/TodoWeekContentContainer.jsx":"50","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/boards/BoardWrap.jsx":"51","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/comments/CommentWrap.jsx":"52","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/TodoWrap.jsx":"53","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/boards/BoardListContainer.jsx":"54","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/boards/BoardUpdateContainer.jsx":"55","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/boards/BoardReadContainer.jsx":"56","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/boards/BoardInsertContainer.jsx":"57","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/weekContent/SilmaelChangeWrap.jsx":"58","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/weekContent/CubeWrap.jsx":"59","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/weekContent/WeekEponaWrap.jsx":"60","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/CharacterSortForm.jsx":"61","/Users/minhyeok/Desktop/LostarkTodo/Front/src/backup/TodoWrap.jsx":"62","/Users/minhyeok/Desktop/LostarkTodo/Front/src/backup/WeekTodoWrap.jsx":"63","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/home/HomeContainer.jsx":"64","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/home/HomeMain.jsx":"65","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/home/HomeBoardContainer.jsx":"66","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/home/HomeBoards.jsx":"67","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/boards/BoardText.jsx":"68","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/home/HomeNoticesContainer.jsx":"69","/Users/minhyeok/Desktop/LostarkTodo/Front/src/apis/notices.js":"70","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/home/HomeNotices.jsx":"71","/Users/minhyeok/Desktop/LostarkTodo/Front/src/apis/auth.js":"72","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/notification/NotificationComponent.jsx":"73","/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/KaKaoAd.js":"74"},{"size":242,"mtime":1694332041421,"results":"75","hashOfConfig":"76"},{"size":362,"mtime":1694195401976,"results":"77","hashOfConfig":"76"},{"size":2657,"mtime":1698719103550,"results":"78","hashOfConfig":"76"},{"size":1327,"mtime":1697176849752,"results":"79","hashOfConfig":"76"},{"size":337,"mtime":1698152681908,"results":"80","hashOfConfig":"76"},{"size":5333,"mtime":1704621321997,"results":"81","hashOfConfig":"76"},{"size":867,"mtime":1694079266240,"results":"82","hashOfConfig":"76"},{"size":1840,"mtime":1703299391153,"results":"83","hashOfConfig":"76"},{"size":136,"mtime":1704721139943,"results":"84","hashOfConfig":"76"},{"size":3874,"mtime":1704621427508,"results":"85","hashOfConfig":"76"},{"size":970,"mtime":1703298708697,"results":"86","hashOfConfig":"76"},{"size":8098,"mtime":1698715394197,"results":"87","hashOfConfig":"76"},{"size":2572,"mtime":1702303146734,"results":"88","hashOfConfig":"76"},{"size":2325,"mtime":1696970973228,"results":"89","hashOfConfig":"76"},{"size":1415,"mtime":1698326557861,"results":"90","hashOfConfig":"76"},{"size":9125,"mtime":1700264844026,"results":"91","hashOfConfig":"76"},{"size":16753,"mtime":1702053858501,"results":"92","hashOfConfig":"76"},{"size":12750,"mtime":1700264116913,"results":"93","hashOfConfig":"76"},{"size":4172,"mtime":1700264520139,"results":"94","hashOfConfig":"76"},{"size":3029,"mtime":1700264767113,"results":"95","hashOfConfig":"76"},{"size":26179,"mtime":1702402478951,"results":"96","hashOfConfig":"76"},{"size":929,"mtime":1701864320122,"results":"97","hashOfConfig":"98"},{"size":2212,"mtime":1702054164633,"results":"99","hashOfConfig":"76"},{"size":1430,"mtime":1704720626570,"results":"100","hashOfConfig":"76"},{"size":1625,"mtime":1702401233441,"results":"101","hashOfConfig":"76"},{"size":1286,"mtime":1701669169998,"results":"102","hashOfConfig":"76"},{"size":726,"mtime":1701852488917,"results":"103","hashOfConfig":"76"},{"size":1703,"mtime":1701849255061,"results":"104","hashOfConfig":"76"},{"size":1598,"mtime":1704721146887,"results":"105","hashOfConfig":"76"},{"size":3675,"mtime":1702401668953,"results":"106","hashOfConfig":"76"},{"size":1413,"mtime":1704719592898,"results":"107","hashOfConfig":"76"},{"size":1670,"mtime":1702263341577,"results":"108","hashOfConfig":"76"},{"size":1326,"mtime":1702032670936,"results":"109","hashOfConfig":"76"},{"size":3894,"mtime":1702263333864,"results":"110","hashOfConfig":"76"},{"size":3770,"mtime":1702966523694,"results":"111","hashOfConfig":"76"},{"size":6811,"mtime":1702966742503,"results":"112","hashOfConfig":"76"},{"size":2458,"mtime":1702402478954,"results":"113","hashOfConfig":"76"},{"size":1899,"mtime":1702303015909,"results":"114","hashOfConfig":"76"},{"size":1463,"mtime":1702404618665,"results":"115","hashOfConfig":"76"},{"size":253,"mtime":1702403883713,"results":"116","hashOfConfig":"76"},{"size":2716,"mtime":1704719816284,"results":"117","hashOfConfig":"76"},{"size":1422,"mtime":1702297395888,"results":"118","hashOfConfig":"76"},{"size":2021,"mtime":1702301876769,"results":"119","hashOfConfig":"76"},{"size":2472,"mtime":1702298915792,"results":"120","hashOfConfig":"76"},{"size":333,"mtime":1702302984851,"results":"121","hashOfConfig":"76"},{"size":7846,"mtime":1702358366318,"results":"122","hashOfConfig":"76"},{"size":12036,"mtime":1702402441252,"results":"123","hashOfConfig":"76"},{"size":12949,"mtime":1702366358389,"results":"124","hashOfConfig":"76"},{"size":8721,"mtime":1702402457963,"results":"125","hashOfConfig":"76"},{"size":14473,"mtime":1702403732184,"results":"126","hashOfConfig":"76"},{"size":1199,"mtime":1704719822132,"results":"127","hashOfConfig":"76"},{"size":1330,"mtime":1702401640974,"results":"128","hashOfConfig":"76"},{"size":2188,"mtime":1702402158997,"results":"129","hashOfConfig":"76"},{"size":1530,"mtime":1704720709688,"results":"130","hashOfConfig":"76"},{"size":434,"mtime":1702401354206,"results":"131","hashOfConfig":"76"},{"size":746,"mtime":1702401354201,"results":"132","hashOfConfig":"76"},{"size":964,"mtime":1702401139678,"results":"133","hashOfConfig":"76"},{"size":1746,"mtime":1702402799021,"results":"134","hashOfConfig":"76"},{"size":1929,"mtime":1702403599160,"results":"135","hashOfConfig":"76"},{"size":1669,"mtime":1702402457960,"results":"136","hashOfConfig":"76"},{"size":4777,"mtime":1702402478944,"results":"137","hashOfConfig":"76"},{"size":33152,"mtime":1702403850087,"results":"138","hashOfConfig":"98"},{"size":21134,"mtime":1702403850093,"results":"139","hashOfConfig":"98"},{"size":403,"mtime":1703266641729,"results":"140","hashOfConfig":"76"},{"size":964,"mtime":1704537597536,"results":"141","hashOfConfig":"76"},{"size":1070,"mtime":1704720044328,"results":"142","hashOfConfig":"76"},{"size":1611,"mtime":1703393723514,"results":"143","hashOfConfig":"76"},{"size":2517,"mtime":1703289314379,"results":"144","hashOfConfig":"76"},{"size":1081,"mtime":1703297028482,"results":"145","hashOfConfig":"76"},{"size":317,"mtime":1703297028490,"results":"146","hashOfConfig":"76"},{"size":1636,"mtime":1703393845446,"results":"147","hashOfConfig":"76"},{"size":397,"mtime":1704005063661,"results":"148","hashOfConfig":"76"},{"size":1352,"mtime":1704720392028,"results":"149","hashOfConfig":"76"},{"size":881,"mtime":1704535962748,"results":"150","hashOfConfig":"76"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"msu5gv",{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},"sou7p6",{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236"},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"240"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247"},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260"},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","suppressedMessages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","suppressedMessages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","suppressedMessages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","suppressedMessages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307"},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"314","messages":"315","suppressedMessages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","suppressedMessages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"323","messages":"324","suppressedMessages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"326","messages":"327","suppressedMessages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329"},{"filePath":"330","messages":"331","suppressedMessages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333"},{"filePath":"334","messages":"335","suppressedMessages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337"},{"filePath":"338","messages":"339","suppressedMessages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341"},{"filePath":"342","messages":"343","suppressedMessages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345"},{"filePath":"346","messages":"347","suppressedMessages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349"},{"filePath":"350","messages":"351","suppressedMessages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","suppressedMessages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"356","messages":"357","suppressedMessages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"175"},{"filePath":"360","messages":"361","suppressedMessages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","suppressedMessages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"366","messages":"367","suppressedMessages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"369","messages":"370","suppressedMessages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"372","usedDeprecatedRules":"175"},{"filePath":"373","messages":"374","suppressedMessages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"175"},{"filePath":"377","messages":"378","suppressedMessages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"380","messages":"381","suppressedMessages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"383","usedDeprecatedRules":"175"},{"filePath":"384","messages":"385","suppressedMessages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"387","messages":"388","suppressedMessages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"390","messages":"391","suppressedMessages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393"},"/Users/minhyeok/Desktop/LostarkTodo/Front/src/index.js",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/reportWebVitals.js",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/SignUp.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/Login.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/LinearIndeterminate.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/Navbar.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/Notification.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/service/api-service.jsx",[],[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/config/api-config.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/App.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/SocialLogin.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/Setting.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/BasicSpeedDial.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/member/ApiKeyUpdateForm.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/icons/DiscordIcon.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/friends/FriendWeekTodoWrap.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/friends/FriendsWrap.jsx",["394","395","396","397","398"],[],"import React, { useState, useEffect } from \"react\";\nimport { call } from \"../../service/api-service\";\nimport SearchIcon from '@mui/icons-material/Search';\nimport DoneIcon from '@mui/icons-material/Done';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { Grid } from \"@mui/material\";\nimport Notification from '../../fragments/Notification';\nimport LinearIndeterminate from '../../fragments/LinearIndeterminate';\nimport FriendWeekTodoWrap from \"./FriendWeekTodoWrap\";\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport PropTypes from 'prop-types';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Box from '@mui/material/Box';\nimport Modal from \"@mui/material/Modal\";\nimport Typography from \"@mui/material/Typography\";\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport FriendTodoWrap from \"./FriendTodoWrap\";\nimport FriendBasicSpeedDial from \"./FriendBasicSpeedDial\";\n\n\n//------------------------- 탭관련 -------------------------\nfunction CustomTabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <div>{children}</div>\n            )}\n        </div>\n    );\n}\nCustomTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n};\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n//-----------------------------------------------------\n\nexport default function FriendsWrap() {\n    const [tabValue, setTabValue] = useState(0);\n    const [friends, setFriends] = useState([]);\n    const [friendSetting, setFriendSetting] = useState([]);\n    const [characters, setCharacters] = useState([]);\n    const [state, setState] = useState(null);\n    const [friendUsername, setFriendUsername] = useState(null);\n    const [showCharacterSortForm, setShowCharacterSortForm] = useState(false);\n\n    const handleChange = (event, friend) => {\n        const index = friends.indexOf(friend);\n\n        setTabValue(index);\n        setState(friend.areWeFriend);\n        setFriendUsername(friend.friendUsername);\n        setCharacters(friend.characterList);\n        setFriendSetting(friend.fromFriendSettings);\n    };\n\n    //Notification 관련\n    const [openSnackbar, setOpenSnackbar] = useState(false);\n    const [snackbarMessage, setSnackbarMessage] = useState('');\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpenSnackbar(false);\n    };\n\n    const showMessage = (message) => {\n        setSnackbarMessage(message);\n        setOpenSnackbar(true);\n    };\n\n    //------------------------- 페이지 로드시 호출 -------------------------\n    useEffect(() => {\n        call(\"/v2/friends\", \"GET\", null)\n            .then((response) => {\n                if (response !== null) {\n                    setFriends(response);\n                    setTabValue(0);\n                    setState(response[0].areWeFriend);\n                    setFriendUsername(response[0].friendUsername);\n                    setCharacters(response[0].characterList);\n                    setFriendSetting(response[0].fromFriendSettings);\n                }\n            })\n            .catch((error) => { showMessage(error.errorMessage) });\n    }, []);\n\n    // 캐릭터 닉네임 검색\n    const findCharacter = () => {\n        const characterName = document.getElementById('find-character').value;\n        if (characterName === '') {\n            showMessage(\"캐릭터명을 입력하여주십시오.\");\n        } else {\n            call(\"/v2/friends/character/\" + characterName, \"GET\", null)\n                .then((response) => {\n                    openFindCharacterFriend(response);\n                })\n                .catch((error) => {\n                    showMessage(error.errorMessage);\n                });\n        }\n    }\n\n    /**\n     * 각종 정보창 모달 관련\n     */\n    // 모달 열기/닫기 상태 관리\n    const [openModal, setOpenModal] = useState(false);\n    const [modalContent, setModalContent] = useState(\"\");\n    const [modalTitle, setModalTitle] = useState(\"\");\n    // 모달 닫기 함수\n    const closeContentModal = () => {\n        setOpenModal(false);\n        setModalTitle(\"\");\n        setModalContent(\"\");\n    };\n\n    // 캐릭터 검색 결과 모달\n    const openFindCharacterFriend = (findCharacterFriend) => {\n        setModalTitle(\"검색 결과\");\n        var content = findCharacterFriend.map((character) => {\n            return (\n                <div key={character.id}>\n                    <p>{character.username.substring(0, 5) + '*'.repeat(character.username.length - 5)}\n                        {character.areWeFriend === \"깐부 요청\" &&\n                            <Button variant=\"outlined\" onClick={() => requestFriend(character.areWeFriend, character.username)}\n                                style={{ marginLeft: 10 }}>\n                                {character.areWeFriend}\n                            </Button>}\n                        {character.areWeFriend === \"깐부 요청 진행중\" &&\n                            <Button variant=\"outlined\" color=\"secondary\" onClick={() => requestFriend(character.areWeFriend, character.username)}\n                                style={{ marginLeft: 10 }}>\n                                {character.areWeFriend}\n                            </Button>}\n                        {character.areWeFriend === \"깐부 요청 받음\" &&\n                            <Button variant=\"outlined\" color=\"success\" onClick={() => requestFriend(character.areWeFriend, character.username)}\n                                style={{ marginLeft: 10 }}>\n                                {character.areWeFriend}\n                            </Button>}\n                        {character.areWeFriend === \"깐부\" &&\n                            <Button variant=\"outlined\" color=\"inherit\" style={{ marginLeft: 10, cursor: \"default\" }}>\n                                {character.areWeFriend}\n                            </Button>\n                        }\n                    </p>\n                </div>\n            );\n        });\n        var modalContent = (\n            <div>\n                {content}\n            </div>\n        );\n        setModalContent(modalContent);\n        setOpenModal(true);\n    };\n\n    // 검색 후 요청 메서드\n    const requestFriend = (category, fromMember) => {\n        if (category === \"깐부 요청\") {\n            call(\"/v2/friends/\" + fromMember, \"POST\", null)\n                .then((response) => {\n                    setFriends(response);\n                    closeContentModal();\n                    showMessage(\"요청이 정상적으로 처리되었습니다.\")\n                })\n                .catch((error) => {\n                    showMessage(error.errorMessage);\n                });\n        }\n        if (category === \"깐부 요청 진행중\" || category === \"깐부 요청 받음\" || category === \"요청 거부\") {\n            handleRequest(\"delete\", fromMember);\n        }\n\n    }\n    //------------------------- 설정 버튼 관련 -------------------------\n    const openSettingForm = (friendsId) => {\n        const friend = friends[friendsId];\n\n        setModalTitle(friend.nickName + \" 권한 설정\");\n        var modalContent = (\n            <div>\n                <div>\n                    <p>\n                        {friend.areWeFriend === \"깐부 요청 받음\" &&\n                            <div>\n                                <Button variant=\"outlined\" onClick={() => handleRequest(\"ok\", friend.friendUsername)}>수락</Button>\n                                <Button variant=\"outlined\" color=\"error\" onClick={() => handleRequest(\"reject\", friend.friendUsername)}>거절</Button>\n                            </div>\n                        }\n                        {friend.areWeFriend !== \"깐부 요청 받음\" &&\n                            <div>\n                                권한 : {friend.areWeFriend}\n                                <Button variant=\"outlined\" color=\"error\" style={{marginLeft:10}} onClick={() => handleRequest(\"delete\", friend.friendUsername)}>깐부 삭제</Button>\n                            </div>\n                        }\n                    </p>\n                </div>\n                <div>\n                    <p>일일 숙제 출력 권한 : {selectSetting(friend.id, friend.toFriendSettings.showDayTodo, \"showDayTodo\")}</p>\n                </div>\n                <div>\n                    <p>일일 숙제 체크 권한 : {selectSetting(friend.id, friend.toFriendSettings.checkDayTodo, \"checkDayTodo\")}</p>\n                </div>\n                <div>\n                    <p>레이드 출력 권한 : {selectSetting(friend.id, friend.toFriendSettings.showRaid, \"showRaid\")}</p>\n                </div>\n                <div>\n                    <p>레이드 체크 권한 : {selectSetting(friend.id, friend.toFriendSettings.checkRaid, \"checkRaid\")}</p>\n                </div>\n                <div>\n                    <p>주간 숙제 출력 권한 : {selectSetting(friend.id, friend.toFriendSettings.showWeekTodo, \"showWeekTodo\")}</p>\n                </div>\n                <div>\n                    <p>주간 숙제 체크 권한 : {selectSetting(friend.id, friend.toFriendSettings.checkWeekTodo, \"checkWeekTodo\")}</p>\n                </div>\n                <div>\n                    <p>설정 변경 권한 : {selectSetting(friend.id, friend.toFriendSettings.setting, \"setting\")}</p>\n                </div>\n            </div>\n        );\n        setModalContent(modalContent);\n        setOpenModal(true);\n    };\n\n    const selectSetting = (friendId, setting, settingName) => (\n        <FormControl size=\"small\">\n            <Select\n                id={`${friendId}_${settingName}`}\n                onChange={(event) => updateSetting(event, friendId, settingName)}\n                defaultValue={setting ? \"true\" : \"false\"}\n                sx={{ bgcolor: setting ? '#FA5858' : \"#81BEF7\", color: \"var(--text-color)\", fontWeight: \"bold\", transition: \"color 0.5s\" }}\n            >\n                <MenuItem value={true} >true</MenuItem>\n                <MenuItem value={false}>false</MenuItem>\n            </Select>\n        </FormControl>\n    );\n\n    const updateSetting = (event, friendId, settingName) => {\n        setShowLinearProgress(true);\n        const updateContent = {\n            id: friendId,\n            name: settingName,\n            value: event.target.value\n        };\n        call(\"/v2/friends/settings\", \"PATCH\", updateContent)\n            .then((response) => {\n                setShowLinearProgress(false);\n                var point = document.getElementById(`${friendId}_${settingName}`);\n                point.style.backgroundColor = event.target.value ? '#FA5858' : \"#81BEF7\";\n            })\n            .catch((error) => {\n                alert(error.errorMessage);\n            });\n    };\n\n    const handleRequest = (category, fromMember) => {\n        const confirmMessage = category === \"delete\" ? \"해당 요청을 삭제 하시겠습니까?\" : null;\n\n        const userConfirmed = confirmMessage ? window.confirm(confirmMessage) : true;\n\n        if (userConfirmed) {\n            setShowLinearProgress(true);\n            call(`/v2/friends/${fromMember}/${category}`, \"PATCH\", null)\n                .then((response) => {\n                    setShowLinearProgress(false);\n                    window.location.replace(\"/friends\");\n                })\n                .catch((error) => {\n                    showMessage(error.errorMessage);\n                });\n        }\n    }\n\n\n\n    const [showLinearProgress, setShowLinearProgress] = useState(false);\n    return (\n        <>\n            {showLinearProgress && <LinearIndeterminate />}\n            <FriendBasicSpeedDial\n                setShowLinearProgress={setShowLinearProgress}\n                setCharacters={setCharacters}\n                showMessage={showMessage}\n                setShowCharacterSortForm={setShowCharacterSortForm}\n                friendSetting={friendSetting}\n                friendUsername={friendUsername}\n            />\n            <div className=\"wrap\">\n                <div>\n                    <TextField id=\"find-character\" label=\"캐릭터 닉네임 입력\" variant=\"outlined\" size=\"small\" />\n                    <Button variant=\"outlined\" onClick={() => findCharacter()}>검색</Button>\n                </div>\n                <div className=\"todo-wrap\" >\n                    <Box sx={{ borderBottom: 1, borderColor: 'divider', width: \"100vw\", maxWidth: \"1280px\" }}>\n                        <Tabs value={tabValue} onChange={(event, friend) => handleChange(event, friend)} aria-label=\"basic tabs example\">\n                            {friends.map((friend, index) =>\n                                <Tab\n                                    label={friend.nickName}\n                                    {...a11yProps(index)}\n                                    key={friend.id}\n                                    onClick={(event) => handleChange(event, friend)}\n                                    style={{ color: \"var(--text-color)\" }}\n                                />\n                            )}\n                        </Tabs>\n                    </Box>\n                    <CustomTabPanel value={tabValue} index={tabValue}>\n                        {characters !== null && <div className=\"setting-wrap\">\n                            <button\n                                className=\"content-button\"\n                                style={{ cursor: \"pointer\", marginBottom: 0 }}\n                                onClick={() => openSettingForm(tabValue)}\n                            >\n                                깐부 설정\n                            </button>\n                            {state !== \"깐부\" && <p>{state}</p>}\n                        </div>}\n                        {state === \"깐부\" && <FriendTodoWrap\n                            characters={characters}\n                            setCharacters={setCharacters}\n                            friends={friends}\n                            setFriends={setFriends}\n                            tabValue={tabValue}\n                            friendSetting={friendSetting}\n                            showMessage={showMessage}\n                            setShowLinearProgress={setShowLinearProgress}\n                            setModalTitle={setModalTitle}\n                            setModalContent={setModalContent}\n                            setOpenModal={setOpenModal}\n                            showCharacterSortForm={showCharacterSortForm}\n                            friendUsername={friendUsername}\n                        />}\n                        {/* {state === \"요청 거부\" && <div style={{ color: 'red' }}>{areWeFriend}</div>} */}\n                    </CustomTabPanel>\n                </div>\n                <Modal\n                    open={openModal}\n                    onClose={closeContentModal}\n                    aria-labelledby=\"modal-title\"\n                    aria-describedby=\"modal-description\"\n                >\n                    <div className=\"miniModal\"\n                        style={{\n                            position: \"absolute\",\n                            top: \"50%\", left: \"50%\",\n                            transform: \"translate(-50%, -50%)\",\n                            backgroundColor: \"#ffffff\",\n                            padding: \"20px 30px 20px 20px\", width: \"auto\", overflowY: \"auto\",\n                            maxHeight: 450,\n                        }}>\n                        <Typography variant=\"h5\" id=\"modal-title\" style={{ color: \"white\", backgroundColor: \"black\", borderRadius: 7, textAlign: \"center\" }}>\n                            {modalTitle}\n                        </Typography>\n                        <pre style={{ whiteSpace: \"pre-wrap\", wordWrap: \"break-word\", lineHeight: 2, fontWeight: \"bold\" }}>\n                            {modalContent}\n                        </pre>\n                    </div>\n                </Modal>\n            </div >\n\n            < Notification\n                message={snackbarMessage}\n                open={openSnackbar}\n                handleClose={handleSnackbarClose}\n            />\n        </>\n    );\n}\n","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/friends/FriendCubeWrap.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/friends/FriendWeekEponaWrap.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/friends/FriendSilmaelChangeWrap.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/friends/FriendTodoWrap.jsx",["399","400","401","402","403"],[],"import React, { useState } from \"react\";\nimport { call } from \"../../service/api-service\";\nimport CharacterSortForm from \"../todo/CharacterSortForm\";\nimport { Grid } from \"@mui/material\";\nimport DoneIcon from '@mui/icons-material/Done';\nimport CloseIcon from '@mui/icons-material/Close';\nimport FriendWeekTodoWrap from \"./FriendWeekTodoWrap\";\nimport Button from '@mui/material/Button';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\n\nconst FriendTodoWrap = (props) => {\n    //------------------------- 일일 수익 & 주간 수익 관련 -------------------------\n    //1. 예상 일일 수익\n    const totalDayGold = props.characters.reduce((accumulator, character) => {\n        if (character.settings.showChaos) {\n            accumulator += character.chaosGold;\n        }\n        if (character.settings.showGuardian) {\n            accumulator += character.guardianGold;\n        }\n        return accumulator;\n    }, 0);\n\n    //2. 일일 수익\n    const getDayGold = props.characters.reduce((accumulator, character) => {\n        if (character.chaosCheck >= 1) {\n            for (var i = 0; i < character.chaosCheck; i++) {\n                accumulator += character.chaosGold / 2;\n            }\n        }\n        if (character.guardianCheck === 1) {\n            accumulator += character.guardianGold;\n        }\n        return accumulator;\n    }, 0);\n\n    //3. 예상 주간 수익\n    const totalWeekGold = props.characters.reduce((accumulator, character) => {\n        if (character.goldCharacter) {\n            character.todoList.forEach((todo) => {\n                accumulator += todo.gold;\n            });\n        }\n        return accumulator;\n    }, 0);\n\n    //4. 주간 수익\n    const getWeekGold = props.characters.reduce((accumulator, character) => {\n        if (character.goldCharacter) {\n            accumulator += character.weekGold;\n        }\n        return accumulator;\n    }, 0);\n    //-------------------------------------------------------------------------\n\n    //------------------------- 일일 숙제 체크 관련 -------------------------\n    const updateDayContent = async (characterId, category, authority) => {\n        if (!authority) {\n            props.showMessage(\"권한이 없습니다.\");\n            return;\n        }\n        props.setShowLinearProgress(true);\n        const updatedCharacters = props.characters.map((character) => {\n            if (character.id === characterId) {\n                var updatedCharacter = {\n                    ...character,\n                };\n                const updateContent = {\n                    characterId: character.id,\n                    characterName: character.characterName,\n                };\n                return call(\"/v2/friends/day-content/check/\" + category, \"PATCH\", updateContent)\n                    .then((response) => {\n                        props.setShowLinearProgress(false);\n                        updatedCharacter = response;\n                        return updatedCharacter;\n                    })\n                    .catch((error) => {\n                        props.setShowLinearProgress(false);\n                        props.showMessage(error.errorMessage);\n                        updatedCharacter[`${category}Check`] = 0;\n                        return updatedCharacter;\n                    });\n            }\n            return character;\n        });\n        const updatedCharactersResult = await Promise.all(updatedCharacters);\n        props.setCharacters(updatedCharactersResult);\n    };\n\n    const updateDayContentAll = async (e, characterId, category, authority) => {\n        e.preventDefault();\n        if (!authority) {\n            props.showMessage(\"권한이 없습니다.\");\n            return;\n        }\n        props.setShowLinearProgress(true);\n        const updatedCharacters = props.characters.map((character) => {\n            if (character.id === characterId) {\n                var updatedCharacter = {\n                    ...character,\n                };\n                const updateContent = {\n                    characterId: character.id,\n                    characterName: character.characterName,\n                };\n                return call(\"/v2/friends/day-content/check/\" + category + \"/all\", \"PATCH\", updateContent)\n                    .then((response) => {\n                        props.setShowLinearProgress(false);\n                        updatedCharacter = response;\n                        return updatedCharacter;\n                    })\n                    .catch((error) => {\n                        props.setShowLinearProgress(false);\n                        props.showMessage(error.errorMessage);\n                        updatedCharacter[`${category}Check`] = 0;\n                        return updatedCharacter;\n                    });\n            }\n            return character;\n        });\n        const updatedCharactersResult = await Promise.all(updatedCharacters);\n        props.setCharacters(updatedCharactersResult);\n    };\n\n    //캐릭터 휴식게이지 업데이트\n    const handleDayContentGuage = async (e, characterId, gaugeType, authority) => {\n        if (!authority) {\n            props.showMessage(\"권한이 없습니다.\");\n            return;\n        }\n        e.preventDefault();\n        const newGaugeValue = window.prompt(`휴식게이지 수정`);\n\n        if (newGaugeValue !== null) {\n            const parsedValue = parseInt(newGaugeValue);\n            if (!isNaN(parsedValue)) {\n                const updatedCharacters = props.characters.map((character) => {\n                    if (character.id === characterId) {\n                        const updatedCharacter = {\n                            ...character,\n                            [`${gaugeType}Gauge`]: parsedValue,\n                        };\n\n                        const updateContent = {\n                            characterId: updatedCharacter.id,\n                            characterName: updatedCharacter.characterName,\n                            chaosGauge: updatedCharacter.chaosGauge,\n                            guardianGauge: updatedCharacter.guardianGauge,\n                            eponaGauge: updatedCharacter.eponaGauge,\n                        };\n\n                        props.setShowLinearProgress(true);\n\n                        return call(\"/v2/friends/day-content/gauge\", \"PATCH\", updateContent)\n                            .then((response) => {\n                                props.setShowLinearProgress(false);\n                                updatedCharacter.chaosGold = response.chaosGold;\n                                updatedCharacter.guardianGold = response.guardianGold;\n                                return updatedCharacter;\n                            })\n                            .catch((error) => {\n                                props.setShowLinearProgress(false);\n                                props.showMessage(error.errorMessage);\n                                return character;\n                            });\n                    }\n                    return character;\n                });\n                const updatedCharactersWithGold = await Promise.all(updatedCharacters);\n                props.setCharacters(updatedCharactersWithGold);\n            }\n        }\n    };\n\n    //------------------------- 서버별 분리 관련 -------------------------\n    // const [anchorEl, setAnchorEl] = useState(null);\n    // const [selectedServer, setSelectedServer] = useState(null);\n    // const [servers, setServers] = useState([]); //서버 리스트\n\n    // const open = Boolean(anchorEl);\n    // const handleClick = (event) => {\n    //     setAnchorEl(event.currentTarget);\n    // };\n    // const handleClose = () => {\n    //     setAnchorEl(null);\n    // };\n    // const handleServerSelect = (serverName) => {\n    //     setSelectedServer(serverName);\n    //     handleClose();\n    //     call(\"/member/characterList/\" + serverName, \"GET\", null)\n    //         .then((characterResponse) => {\n    //             props.setCharacters(characterResponse);\n    //         })\n    // };\n    // const serverItems = Object.entries(servers).map(([serverName, count]) => (\n    //     <MenuItem key={serverName} value={serverName}\n    //         onClick={() => handleServerSelect(serverName)}>\n    //         {serverName}: {count}개\n    //     </MenuItem>\n    // ));\n\n    // 도전 어비스/가디언 체크(v2 업데이트 완료)\n    const updateChallenge = async (character, content, authority) => {\n        if (!authority) {\n            props.showMessage(\"권한이 없습니다.\");\n            return;\n        }\n        props.setShowLinearProgress(true);\n        const updateContent = {\n            characterId: character.id,\n            serverName: character.serverName,\n            content: content\n        };\n        try {\n            const response = await call(\"/v2/friends/challenge\", \"PATCH\", updateContent);\n            props.setCharacters(response);\n            props.setShowLinearProgress(false);\n        } catch (error) {\n            console.error(\"Error updating challenge:\", error);\n            props.setShowLinearProgress(false);\n        }\n    }\n\n    //-----------------------------------------------------------------------------\n    return (\n        <div>\n            <div className=\"wrap\" style={{ marginTop: 0 }}>\n                <div className=\"setting-wrap\">\n                    <div className=\"content-box\">\n                        <p>일일 수익</p>\n                        <span className=\"bar\">\n                            <i style={{ width: `${getDayGold / totalDayGold * 100}%` }}></i>\n                            <em style={{ textAlign: \"center\" }}>{(getDayGold / totalDayGold * 100).toFixed(1)} %</em>\n                        </span>\n                        <p>{getDayGold.toFixed(2)} / <span>{totalDayGold.toFixed(2)}</span>G</p>\n                    </div>\n                    <div className=\"content-box\">\n                        <p>주간 수익</p>\n                        <span className=\"bar\">\n                            <i style={{ width: `${getWeekGold / totalWeekGold * 100}%` }}></i>\n                            <em style={{ textAlign: \"center\" }}>{(getWeekGold / totalWeekGold * 100).toFixed(1)} %</em>\n                        </span>\n                        <p className={`${getWeekGold / totalWeekGold}` === 1 ? \"on\" : \"\"}>{getWeekGold.toLocaleString()} / <span>{totalWeekGold.toLocaleString()}</span>G</p>{/* pub width가 100% 시 on 클래스 추가해주세요!(골드색변함) */}\n                    </div>\n                </div>\n                {props.showCharacterSortForm && <CharacterSortForm\n                    characters={props.characters}\n                    setCharacters={props.setCharacters}\n                    setShowLinearProgress={props.setShowLinearProgress}\n                    showMessage={props.showMessage}\n                    setShowCharacterSortForm={props.setShowCharacterSortForm}\n                    friendSetting={props.friendSetting}\n                    friendUsername={props.friendUsername}\n                />}\n                <div className=\"setting-wrap\">\n                    {/* <div>\n                        <Button\n                            id=\"fade-button\"\n                            aria-controls={open ? 'fade-menu' : undefined}\n                            aria-haspopup=\"true\"\n                            aria-expanded={open ? 'true' : undefined}\n                            onClick={handleClick}\n                        >\n                            {selectedServer} {servers[selectedServer]}개\n                        </Button>\n                        <Menu\n                            id=\"fade-menu\"\n                            MenuListProps={{\n                                'aria-labelledby': 'fade-button',\n                            }}\n                            anchorEl={anchorEl}\n                            open={open}\n                            onClose={handleClose}\n                            TransitionComponent={Fade}\n                        >\n                            {serverItems}\n                        </Menu>\n                    </div> */}\n                    <button\n                        className={`content-button ${props.characters.length > 0 && props.characters[0].challengeGuardian === true ? \"done\" : \"\"}`}\n                        onClick={() => updateChallenge(props.characters[0], \"Guardian\", props.friendSetting.checkWeekTodo)} style={{ cursor: \"pointer\" }}\n                    >\n                        도전 가디언 토벌\n                        <div className=\"content-button-text\" onClick={() => updateChallenge(props.characters[0], \"Guardian\", props.friendSetting.checkWeekTodo)}>\n                            {props.characters.length > 0 && (props.characters[0]?.challengeGuardian === true ? <DoneIcon /> : \"\")}\n                        </div>\n                    </button>\n                    <button\n                        className={`content-button ${props.characters.length > 0 && props.characters[0].challengeAbyss === true ? \"done\" : \"\"}`}\n                        onClick={() => updateChallenge(props.characters[0], \"Abyss\", props.friendSetting.checkWeekTodo)} style={{ cursor: \"pointer\" }}\n                    >\n                        도전 어비스 던전\n                        <div className=\"content-button-text\" onClick={() => updateChallenge(props.characters[0], \"Abyss\", props.friendSetting.checkWeekTodo)}>\n                            {props.characters.length > 0 && (props.characters[0]?.challengeAbyss === true ? <DoneIcon /> : \"\")}\n                        </div>\n                    </button>\n                </div>\n                <div className=\"todo-wrap\" >\n                    <Grid container spacing={1.5} overflow={\"hidden\"}>\n                        {props.characters.map((character) => (\n                            <Grid key={character.id} item>\n                                <div className=\"character-wrap\">\n                                    <div className=\"character-info\"\n                                        style={{\n                                            backgroundImage: character.characterImage !== null ? `url(${character.characterImage})` : \"\",\n                                            backgroundPosition: character.characterClassName === \"도화가\" || character.characterClassName === \"기상술사\" ? \"left 10px top -80px\" : \"left 10px top -30px\",\n                                            backgroundColor: \"gray\", // 배경색을 회색으로 설정\n                                        }}>\n                                        <div className={character.goldCharacter ? \"gold-border\" : \"\"}>\n                                            {character.goldCharacter ? \"골드 획득 지정\" : \"\"} {/* pub 문구변경 */}\n                                        </div>\n                                        <span>@{character.serverName}  {character.characterClassName}</span>\n                                        <h3 style={{ margin: 0 }}>{character.characterName}</h3>\n                                        <h2 style={{ margin: 0 }}>Lv. {character.itemLevel}</h2>\n                                    </div>\n                                    <p className=\"title\">일일 숙제</p>{/* pub 추가 */}\n                                    {props.friendSetting.showDayTodo && <div>\n                                        <div className=\"content-wrap\">\n                                            <div className=\"content\"\n                                                onClick={() => updateDayContent(character.id, \"epona\", props.friendSetting.checkDayTodo)}\n                                                onContextMenu={(e) => updateDayContentAll(e, character.id, \"epona\", props.friendSetting.checkDayTodo)}\n                                                style={{ cursor: \"pointer\" }}\n                                            >\n                                                <button\n                                                    className={`content-button ${character.eponaCheck === 3 ? \"done\" :\n                                                        character.eponaCheck === 1 ? \"ing\" :\n                                                            character.eponaCheck === 2 ? \"ing2\" : \"\"}`}\n                                                >\n                                                    {character.eponaCheck === 3 ? <DoneIcon /> : <CloseIcon />}\n                                                </button>\n                                                <div\n                                                    className={`${character.eponaCheck === 3 ? \"text-done\" : \"\"}`}>\n                                                    <span>에포나의뢰</span>\n                                                </div>\n                                            </div>\n                                            <div className=\"content gauge-box\" style={{ height: 24, padding: 0, position: \"relative\", cursor: \"pointer\" }}\n                                                onContextMenu={(e) => handleDayContentGuage(e, character.id, \"epona\", props.friendSetting.checkDayTodo)}\n                                                onClick={(e) => handleDayContentGuage(e, character.id, \"epona\", props.friendSetting.checkDayTodo)}>\n                                                {Array.from({ length: 5 }, (_, index) => (\n                                                    <div key={index} className=\"gauge-wrap\">\n                                                        <div\n                                                            className=\"gauge\"\n                                                            style={{ backgroundColor: index * 2 < character.eponaGauge / 10 ? \"#cfecff\" : undefined }}\n                                                        ></div>\n                                                        <div\n                                                            className=\"gauge\"\n                                                            style={{ backgroundColor: index * 2 + 1 < character.eponaGauge / 10 ? \"#cfecff\" : undefined }}\n                                                        ></div>\n                                                    </div>\n                                                ))}\n                                                <span className=\"gauge-text\">\n                                                    휴식게이지 {character.eponaGauge}\n                                                </span>\n                                            </div>\n                                        </div>\n                                        <div className=\"content-wrap\">\n                                            <div className=\"content\" onClick={() => updateDayContent(character.id, \"chaos\", props.friendSetting.checkDayTodo)}\n                                                onContextMenu={(e) => updateDayContentAll(e, character.id, \"chaos\", props.friendSetting.checkDayTodo)}\n                                                style={{ cursor: \"pointer\" }}>\n                                                <button\n                                                    className={`content-button ${character.chaosCheck === 0 ? \"\" :\n                                                        character.chaosCheck === 1 ? \"ing\" : \"done\"}`}\n                                                >\n                                                    {character.chaosCheck === 2 ? <DoneIcon /> : <CloseIcon />}\n                                                </button>\n                                                <div\n                                                    className={`${character.chaosCheck === 2 ? \"text-done\" : \"\"}`}\n                                                >\n                                                    <p>카오스던전</p>\n                                                    <p className=\"gold\">({character.chaosGold} gold)</p>\n                                                </div>\n                                            </div>\n                                            <div className=\"content gauge-box\" style={{ height: 24, padding: 0, position: \"relative\", cursor: \"pointer\" }}\n                                                onContextMenu={(e) => handleDayContentGuage(e, character.id, \"chaos\", props.friendSetting.checkDayTodo)}\n                                                onClick={(e) => handleDayContentGuage(e, character.id, \"chaos\", props.friendSetting.checkDayTodo)}>\n                                                {Array.from({ length: 5 }, (_, index) => (\n                                                    <div key={index} className=\"gauge-wrap\">\n                                                        <div\n                                                            className=\"gauge\"\n                                                            style={{ backgroundColor: index * 2 < character.chaosGauge / 10 ? \"#cfecff\" : undefined }}\n                                                        ></div>\n                                                        <div\n                                                            className=\"gauge\"\n                                                            style={{ backgroundColor: index * 2 + 1 < character.chaosGauge / 10 ? \"#cfecff\" : undefined }}\n                                                        ></div>\n                                                    </div>\n                                                ))}\n                                                <span className=\"gauge-text\">\n                                                    휴식게이지 {character.chaosGauge}\n                                                </span>\n                                            </div>\n                                        </div>\n                                        <div className=\"content-wrap\">\n                                            <div className=\"content\" onClick={() => updateDayContent(character.id, \"guardian\", props.friendSetting.checkDayTodo)}\n                                                onContextMenu={(e) => updateDayContentAll(e, character.id, \"guardian\", props.friendSetting.checkDayTodo)}\n                                                style={{ cursor: \"pointer\" }}>\n                                                <button\n                                                    className={`content-button ${character.guardianCheck === 1 ? \"done\" : \"\"}`}\n                                                >\n                                                    {character.guardianCheck === 1 ? <DoneIcon /> : <CloseIcon />}\n                                                </button>\n                                                <div\n                                                    className={`${character.guardianCheck === 1 ? \"text-done\" : \"\"}`}\n                                                >\n                                                    <p>가디언토벌</p>\n                                                    <p className=\"gold\">({character.guardianGold} gold)</p>\n                                                </div>\n                                            </div>\n                                            <div className=\"content gauge-box\" style={{ height: 24, padding: 0, position: \"relative\", cursor: \"pointer\" }}\n                                                onContextMenu={(e) => handleDayContentGuage(e, character.id, \"guardian\", props.friendSetting.checkDayTodo)}\n                                                onClick={(e) => handleDayContentGuage(e, character.id, \"guardian\", props.friendSetting.checkDayTodo)}>\n                                                {Array.from({ length: 5 }, (_, index) => (\n                                                    <div key={index} className=\"gauge-wrap\">\n                                                        <div\n                                                            className=\"gauge\"\n                                                            style={{ backgroundColor: index * 2 < character.guardianGauge / 10 ? \"#cfecff\" : undefined }}\n                                                        ></div>\n                                                        <div\n                                                            className=\"gauge\"\n                                                            style={{ backgroundColor: index * 2 + 1 < character.guardianGauge / 10 ? \"#cfecff\" : undefined }}\n                                                        ></div>\n                                                    </div>\n                                                ))}\n                                                <span className=\"gauge-text\">\n                                                    휴식게이지 {character.guardianGauge}\n                                                </span>\n                                            </div>\n                                        </div>\n                                    </div>}\n                                </div>\n                                <FriendWeekTodoWrap\n                                    characters={props.characters}\n                                    setCharacters={props.setCharacters}\n                                    character={character}\n                                    setModalTitle={props.setModalTitle}\n                                    setModalContent={props.setModalContent}\n                                    setOpenModal={props.setOpenModal}\n                                    setShowLinearProgress={props.setShowLinearProgress}\n                                    showMessage={props.showMessage}\n                                    friendSetting={props.friendSetting}\n                                />\n                            </Grid>\n                        ))}\n                    </Grid>\n                </div>\n            </div >\n        </div>\n    );\n};\n\nexport default FriendTodoWrap;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/AdsCard.js",[],[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/friends/FriendBasicSpeedDial.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/apis/boards.js",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/boards/BoardList.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/boards/BoardInsertForm.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/boards/Board.jsx",["404","405"],[],"import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\n\n//게시글 조회\nconst Board = ({ board, no }) => {\n    const createMarkup = () => {\n        return { __html: board.content };\n    };\n    return (\n        <div className=\"board-container\">\n            <div className=\"board-info\">\n                <p className=\"notice-title\">공지 | {board.title}</p>\n                <p className=\"reg-date\">{new Date(board.regDate).toLocaleString()}</p>\n            </div>\n            <div className=\"board-content\" dangerouslySetInnerHTML={createMarkup()} />\n            {/* <Link to={`/boards/update/${no}`}>수정</Link> */}\n        </div>\n    );\n};\n\nexport default Board;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/search/SearchBox.jsx",["406","407"],[],"import React, { useState } from \"react\";\nimport './SearchBox.css';\nimport SearchIcon from '@mui/icons-material/Search';\nimport CloseIcon from \"@mui/icons-material/Close\";\n\nfunction SearchBox({ placeholder, data }) {\n    const [filteredData, setFilteredData] = useState([]);\n    const [wordEntered, setWordEntered] = useState(\"\");\n  \n    const handleFilter = (event) => {\n      const searchWord = event.target.value;\n      setWordEntered(searchWord);\n      const newFilter = data.filter((value) => {\n        return value.title.toLowerCase().includes(searchWord.toLowerCase());\n      });\n  \n      if (searchWord === \"\") {\n        setFilteredData([]);\n      } else {\n        setFilteredData(newFilter);\n      }\n    };\n  \n    const clearInput = () => {\n      setFilteredData([]);\n      setWordEntered(\"\");\n    };\n  \n    return (\n      <div className=\"search\">\n        <div className=\"searchInputs\">\n          <input\n            type=\"text\"\n            placeholder={placeholder}\n            value={wordEntered}\n            onChange={handleFilter}\n          />\n          <div className=\"searchIcon\">\n            {filteredData.length === 0 ? (\n              <SearchIcon />\n            ) : (\n              <CloseIcon id=\"clearBtn\" onClick={clearInput} />\n            )}\n          </div>\n        </div>\n        {filteredData.length != 0 && (\n          <div className=\"dataResult\">\n            {filteredData.slice(0, 15).map((value, key) => {\n              return (\n                <a className=\"dataItem\" href={value.link} target=\"_blank\">\n                  <p>{value.title} </p>\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    );\n  }\n\nexport default SearchBox;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/apis/api.js",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/comments/CommentListContainer.jsx",["408","409","410"],[],"import React, {useState, useEffect} from 'react';\nimport * as comment from '../../apis/comments';\nimport CommentList from '../../components/comments/CommentList';\nimport PageNation from '../../fragments/PageNation';\nimport CommentWrap from \"../../components/comments/CommentWrap\";\n\n// 방명록 리스트\n// 루트 코멘트 5개 + 답글 출력\nconst CommentListContainer = ({setIsLoading}) => {\n\n    //state 설정\n    const [backendComments, setBackendComments] = useState([]);\n    const [rootComments, setRootComments] = useState([]);\n    const [currentUser, setCurrentUser] = useState([]);\n    const [activeComment, setActiveComment] = useState(null);\n    const [totalPages, setTotalPages] = useState(1);\n    const [currentPage, setCurrentPage] = useState(1);\n\n    // 방명록 데이터\n    const getComment = async (page) => {\n        setIsLoading(true);\n        const data = await comment.list(page);\n        setBackendComments(data.commentDtoList);\n        setTotalPages(data.totalPages);\n        setCurrentUser(data.memberResponseDto)\n        isRootComments(data.commentDtoList);\n        setIsLoading(false);\n    }\n\n    // 데이터 호출\n    useEffect(() => {\n        getComment(currentPage);\n    }, [currentPage]);\n\n    //게시글 추가\n    const addComment = async (text, parentId = null) => {\n        const data = await comment.addComment(text, parentId);\n        setBackendComments(data.commentDtoList);\n        setTotalPages(data.totalPages);\n        isRootComments(data.commentDtoList);\n        setCurrentPage(1);\n        setActiveComment(null);\n    };\n\n    //게시글 수정\n    const updateComment = async (text, commentId, page) => {\n        const data = await comment.updateComment(text, commentId, page);\n        setBackendComments(data.commentDtoList);\n        isRootComments(data.commentDtoList);\n        setActiveComment(null);\n    };\n\n    //게시글 삭제\n    const deleteComment = async (commentId) => {\n        const data = await comment.deleteComment(commentId);\n        setBackendComments(data.commentDtoList);\n        setTotalPages(data.totalPages);\n        isRootComments(data.commentDtoList);\n        setCurrentPage(1);\n        setActiveComment(null);\n    };\n\n    //루트 코멘트인가?\n    const isRootComments = (backendComments) => {\n        setRootComments(backendComments.filter((backendComment) => backendComment.parentId === 0));\n    }\n\n    //답글인가? (루트 코멘트가 있는가?)\n    const getReplies = (commentId) =>\n        backendComments\n            .filter((backendComment) => backendComment.parentId === commentId)\n            .sort(\n                (a, b) =>\n                    new Date(a.regDate).getTime() - new Date(b.regDate).getTime()\n            );\n\n    // 페이징\n    const handlePageClick = async (page) => {\n        if (page <= totalPages) {\n            try {\n                const data = await comment.list(page);\n                setBackendComments(data.commentDtoList);\n                isRootComments(data.commentDtoList);\n                setCurrentPage(page);\n            } catch (error) {\n                console.log(error);\n            }\n        }\n    };\n\n    return (\n        <CommentWrap\n            addComment={addComment}\n            rootComments={rootComments}\n            getReplies={getReplies}\n            activeComment={activeComment}\n            setActiveComment={setActiveComment}\n            deleteComment={deleteComment}\n            updateComment={updateComment}\n            currentUser={currentUser}\n            currentPage={currentPage}\n            handlePageClick={handlePageClick}\n            totalPages={totalPages}\n        />\n    );\n};\n\nexport default CommentListContainer;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/apis/comments.js",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/comments/CommentList.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/comments/CommentInsertForm.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/comments/Comment.jsx",["411"],[],"import React from 'react';\nimport CommentInsertForm from './CommentInsertForm';\n\nconst Comment = ({\n    comment,\n    replies,\n    setActiveComment,\n    activeComment,\n    updateComment,\n    deleteComment,\n    addComment,\n    parentId = null,\n    currentUser, \n    currentPage\n  }) => {\n    const isEditing =\n      activeComment &&\n      activeComment.id === comment.id &&\n      activeComment.type === \"editing\";\n    const isReplying =\n      activeComment &&\n      activeComment.id === comment.id &&\n      activeComment.type === \"replying\";\n    const canDelete =\n      (currentUser.id === comment.memberId && replies.length === 0);\n    const canReply = (currentUser.role === \"ADMIN\" || \"PUBLISHER\") || (currentUser.id === comment.memberId);\n    const canEdit = currentUser.id === comment.memberId;\n    const replyId = parentId ? parentId : comment.id;\n    const regDate = new Date(comment.regDate).toLocaleString();\n    var username = \"\";\n    if (comment.role === \"ADMIN\") {\n      username = \"관리자\";\n    } else if (comment.role === \"PUBLISHER\") {\n      username = \"UI담당자\";\n    } else {\n      username = comment.username.substring(0, 5) + '*'.repeat(comment.username.length - 5);\n    }\n  \n    return (\n      <div key={comment.id} className=\"comment\">\n        <div className=\"comment-image-container\">\n          <img src=\"/user-icon.png\" />\n        </div>\n        <div className=\"comment-right-part\">\n          <div className=\"comment-content\">\n            <div>\n              <span className=\"comment-author\"\n                style={{ color: comment.role === \"ADMIN\" ? \"blue\" : \"\" }}\n              >{username}</span>({regDate})\n            </div>\n          </div>\n          {!isEditing && <div className=\"comment-text\">{comment.body}</div>}\n          {isEditing && (\n            <CommentInsertForm\n              submitLabel=\"Update\"\n              hasCancelButton\n              initialText={comment.body}\n              handleSubmit={(text) => updateComment(text, comment.id, currentPage)}\n              handleCancel={() => {\n                setActiveComment(null);\n              }}\n            />\n          )}\n          <div className=\"comment-actions\">\n            {canReply && (\n              <div\n                className=\"comment-action\"\n                onClick={() =>\n                  setActiveComment({ id: comment.id, type: \"replying\" })\n                }\n              >\n                Reply\n              </div>\n            )}\n            {canEdit && (\n              <div\n                className=\"comment-action\"\n                onClick={() =>\n                  setActiveComment({ id: comment.id, type: \"editing\" })\n                }\n              >\n                Edit\n              </div>\n            )}\n            {canDelete && (\n              <div\n                className=\"comment-action\"\n                onClick={() => deleteComment(comment.id)}\n              >\n                Delete\n              </div>\n            )}\n          </div>\n          {isReplying && (\n            <CommentInsertForm\n              submitLabel=\"Reply\"\n              handleSubmit={(text) => addComment(text, replyId)}\n            />\n          )}\n          {replies.length > 0 && (\n            <div className=\"replies\">\n              {replies.map((reply) => (\n                <Comment\n                  comment={reply}\n                  key={reply.id}\n                  setActiveComment={setActiveComment}\n                  activeComment={activeComment}\n                  updateComment={updateComment}\n                  deleteComment={deleteComment}\n                  addComment={addComment}\n                  parentId={comment.id}\n                  replies={[]}\n                  currentUser={currentUser}\n                  currentPage={currentPage}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  export default Comment;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/todo/TodoContainer.jsx",["412"],[],"import React, {useState, useEffect} from 'react';\nimport * as todo from '../../apis/todo';\nimport TodoWrap from \"../../components/todo/TodoWrap\";\n\n// 숙제 관리 사이트 메인\nconst TodoContainer = ({setIsLoading, showMessage}) => {\n\n    // state 설정\n    const [allCharacters, setAllCharacters] = useState([]); //전체 캐릭터 리스트\n    const [characters, setCharacters] = useState([]); //출력할 캐릭터 리스트\n    const [servers, setServers] = useState([]); //서버 리스트\n    const [selectedServer, setSelectedServer] = useState(null);\n    const [showCharacterSortForm, setShowCharacterSortForm] = useState(false);\n\n    // state 설정 - 모달 열기/닫기 상태 관리\n    const [openModal, setOpenModal] = useState(false);\n    const [modalContent, setModalContent] = useState(\"\");\n    const [modalTitle, setModalTitle] = useState(\"\");\n\n    // 모달 닫기 함수\n    const closeContentModal = () => {\n        setOpenModal(false);\n        setModalTitle(\"\");\n        setModalContent(\"\");\n    };\n\n    // 캐릭터 데이터\n    const getCharacters = async () => {\n        setIsLoading(true);\n        const data = await todo.list();\n        setAllCharacters(data);\n\n        // setServers { serverKey: count }\n        const serverInfoObject = Object.keys(data).reduce((acc, serverKey) => {\n            acc[serverKey] = data[serverKey].length;\n            return acc;\n        }, {});\n        setServers(serverInfoObject);\n\n        // setCharacters default maxCount\n        const maxKey = Object.keys(serverInfoObject).reduce((prevKey, currentKey) => {\n            return serverInfoObject[currentKey] > serverInfoObject[prevKey] ? currentKey : prevKey;\n        }, Object.keys(serverInfoObject)[0]);\n\n        setSelectedServer(maxKey);\n        setCharacters(data[maxKey]);\n        setIsLoading(false);\n    };\n\n\n    // 페이지 로드시 호출\n    useEffect(() => {\n        const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n        if (accessToken === null) {\n            window.location.href = \"/login\";\n        }\n        // 캐릭터 데이터 호출\n        getCharacters();\n\n        // 반응형 사이트\n        function handleResize() {\n            setItemsPerRow(calculateItemsPerRow());\n        }\n\n        window.addEventListener(\"resize\", handleResize);\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    // 반응형 사이트 함수\n    const [itemsPerRow, setItemsPerRow] = useState(calculateItemsPerRow());\n\n    function calculateItemsPerRow() {\n        var screenWidth = window.innerWidth;\n        if (screenWidth >= 1300) {\n            screenWidth = 1300;\n        }\n        const width = 250;\n        const row = 2;\n        if (screenWidth > width * row) {\n            return Math.ceil(screenWidth / width);\n        } else {\n            return row;\n        }\n    }\n\n    return (\n        <TodoWrap\n            setIsLoading={setIsLoading}\n            setCharacters={setCharacters}\n            showMessage={showMessage}\n            setShowCharacterSortForm={setShowCharacterSortForm}\n            allCharacters={allCharacters}\n            characters={characters}\n            servers={servers}\n            setServers={setServers}\n            selectedServer={selectedServer}\n            setSelectedServer={setSelectedServer}\n            showCharacterSortForm={showCharacterSortForm}\n            itemsPerRow={itemsPerRow}\n            openModal={openModal}\n            setOpenModal={setOpenModal}\n            modalContent={modalContent}\n            setModalContent={setModalContent}\n            modalTitle={modalTitle}\n            setModalTitle={setModalTitle}\n            closeContentModal={closeContentModal}\n        />\n    );\n};\n\nexport default TodoContainer;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/apis/todo.js",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/TodoMain.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/todo/TodoProfitsContainer.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/TodoProfit.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/CircularLoading.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/PageNation.jsx",["413","414","415","416","417","418","419"],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/TodoModal.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/todo/TodoServerAndChallengeContainer.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/TodoServerAndChallenge.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/apis/friend.js",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/todo/TodoContentWrapContainer.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/TodoContentWrap.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/todo/TodoWeekRaidContainer.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/TodoWeekRaid.jsx",["420","421","422"],[],"import React from 'react';\nimport DoneIcon from \"@mui/icons-material/Done\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport AddBoxIcon from \"@mui/icons-material/AddBox\";\nimport WeekEponaWrap from \"./weekContent/WeekEponaWrap\";\nimport SilmaelChangeWrap from \"./weekContent/SilmaelChangeWrap\";\nimport CubeWrap from \"./weekContent/CubeWrap\";\nimport TodoWeekContentContainer from \"../../containers/todo/TodoWeekContentContainer\";\n\nconst TodoWeekRaid = ({\n                          setIsLoading,\n                          showMessage,\n                          character,\n                          characters,\n                          setCharacters,\n                          openAddTodoForm,\n                          updateWeekCheck,\n                          updateWeekCheckAll,\n                          updateWeekMessage,\n                          changeShow,\n                          setModalTitle,\n                          setModalContent,\n                          setOpenModal\n                      }) => {\n    return (\n        <div className=\"character-wrap\">\n            <div className=\"content\" style={{padding: 0, display: character.settings.showWeekTodo ? \"block\" : \"none\"}}>\n                <p className=\"title\">주간 레이드</p>{/* pub 추가 */}\n                <p className=\"txt\">마우스 우클릭 시 한번에 체크됩니다</p>{/* pub 추가 */}\n                <button\n                    className={\"content-button\"}\n                    onClick={() => openAddTodoForm(character.id, character.characterName, character.goldCharacter)}\n                    style={{width: '101%', fontWeight: \"bold\", fontSize: 16}}\n                >\n                    편집{/* pub 추가 */}\n                </button>\n            </div>\n            <div className=\"character-todo\">\n                {character.todoList.map((todo) => (\n                    <div className=\"content-wrap\" key={todo.id}>\n                        <div\n                            className=\"content\"\n                            style={{\n                                height: 75,\n                                position: \"relative\",\n                                justifyContent: \"space-between\",\n                                fontSize: 14, //pub 수정\n                            }}\n                        >\n                            <div style={{\n                                display: \"flex\",\n                                flexDirection: \"row\",\n                                justifyContent: \"center\",\n                                cursor: \"pointer\"\n                            }}>\n                                {/* 여기서 부터 */}\n                                <button\n                                    className={`content-button ${todo.check ? \"done\" : \"\"}`}\n                                    style={{cursor: \"pointer\"}}\n                                    onClick={() => updateWeekCheck(character.characterName, todo)}\n                                    onContextMenu={(e) => updateWeekCheckAll(e, character.characterName, todo)}\n                                >\n                                    {todo.check ? <DoneIcon/> : <CloseIcon/>}\n                                </button>\n                                {/* 여기까지 클릭 버튼 */}\n                                {/* 여기서 부터 */}\n                                <div style={{\n                                    display: \"flex\",\n                                    flexDirection: \"column\",\n                                    justifyContent: \"center\",\n                                    width: \"100%\"\n                                }}>\n                                    <div\n                                        className={`${todo.check ? \"text-done\" : \"\"}`}\n                                        onClick={() => updateWeekCheck(character.characterName, todo)}\n                                        onContextMenu={(e) => updateWeekCheckAll(e, character.characterName, todo)}\n                                        dangerouslySetInnerHTML={{__html: todo.name.replace(/\\n/g, \"<br />\")}} // pub 이부분 원래로 원복\n                                    >\n                                    </div>\n                                    <div\n                                        className={`${todo.check ? \"text-done\" : \"\"}`}\n                                        onClick={() => updateWeekCheck(character.characterName, todo)}\n                                        onContextMenu={(e) => updateWeekCheckAll(e, character.characterName, todo)}\n                                    >\n                                        <span\n                                            className=\"gold\">{character.goldCharacter ? todo.gold + \" G\" : \"\"}</span> {/* pub span gold 추가 */}\n                                    </div>\n                                    <div className={\"input-field\"} id={\"input_field_\" + todo.id}>\n                                        {todo.message !== null && (\n                                            <input\n                                                type=\"text\"\n                                                spellCheck=\"false\"\n                                                defaultValue={todo.message}\n                                                style={{width: \"90%\"}}\n                                                onBlur={(e) => updateWeekMessage(character.id, todo.id, e.target.value)}\n                                                onKeyDown={(e) => {\n                                                    if (e.key === \"Enter\") {\n                                                        updateWeekMessage(character.id, todo.id, e.target.value);\n                                                        e.target.blur();\n                                                    }\n                                                }}\n                                                placeholder=\"메모 추가\"\n                                            />\n                                        )}\n                                    </div>\n                                </div>\n                                {/* 여기까지 출력 글씨 */}\n                                {/* 여기서 부터 */}\n                                <div>\n                                    {todo.message === null ?\n                                        <AddBoxIcon id={\"input_field_icon_\" + todo.id}\n                                                    onClick={() => changeShow(character.id, todo.id)}/> : \"\"}\n                                </div>\n                                {/* 여기까지 \"+\" 버튼 */}\n                            </div>\n                        </div>\n                        <div className=\"content gauge-box\"\n                             style={{height: 16, padding: 0, position: \"relative\"}}> {/* pub guage-box 클래스추가 */}\n                            {Array.from({length: todo.totalGate}, (_, index) => (\n                                <div key={`${todo.id}-${index}`} className=\"gauge-wrap\"\n                                     style={{\n                                         backgroundColor: todo.currentGate > index ? \"#ffbfb6\" : \"\", // pub\n                                         width: 100 / todo.totalGate + \"%\",\n                                         alignItems: \"center\",\n                                         justifyContent: \"center\",\n                                         color: \"var(--text-color)\"\n                                     }}>\n                                    <span>{index + 1}관문</span>\n                                </div>\n                            ))}\n                            <span className=\"gauge-text\"></span>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            {/* pub 2023-10-23 스타일 적용 완료 */}\n            {(character.settings.showWeekEpona || character.settings.showSilmaelChange || character.settings.showCubeTicket) &&\n                <div className=\"content title02\" style={{padding: 0}}>\n                    <p className=\"title\">주간 숙제</p>\n                </div>\n            }\n            {/*주간 숙제(에포나, 큐브, 실마엘)*/}\n            <TodoWeekContentContainer\n                showMessage={showMessage}\n                setIsLoading={setIsLoading}\n                character={character}\n                characters={characters}\n                setCharacters={setCharacters}\n                setModalTitle={setModalTitle}\n                setModalContent={setModalContent}\n                setOpenModal={setOpenModal}\n            />\n        </div>\n    );\n};\n\nexport default TodoWeekRaid;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/todo/TodoWeekContentContainer.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/boards/BoardWrap.jsx",["423"],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/comments/CommentWrap.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/TodoWrap.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/boards/BoardListContainer.jsx",["424"],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/boards/BoardUpdateContainer.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/boards/BoardReadContainer.jsx",["425"],[],"import React, {useEffect, useState} from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as boards from '../../apis/boards';\nimport Board from '../../components/boards/Board';\n\n// 게시글 조회\nconst BoardReadContainer = () => {\n    const { no } = useParams(); //url경로에 있는 param\n\n    // state 설정\n    const [board, setBoard] = useState([]);\n\n    // 게시글 목록 데이터\n    const getBoard = async () => {\n        try {\n            const data = (await boards.select(no));\n            setBoard(data);\n        } catch(e) {\n            console.log(e);\n        }\n    }\n\n    useEffect(()=>{\n        getBoard();\n    }, []);\n\n    return (<Board board={board} no={no}></Board>);\n};\n\nexport default BoardReadContainer;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/boards/BoardInsertContainer.jsx",["426","427"],[],"import React, {useEffect} from 'react';\nimport * as boards from '../../apis/boards';\nimport BoardInsertForm from '../../components/boards/BoardInsertForm';\nimport {useNavigate} from 'react-router-dom';\n\n// 게시글 등록 \nconst BoardInsertContainer = () => {\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n        if (accessToken === null || !accessToken) {\n            alert(\"로그인 후 이용해주세요!\");\n            navigate(\"/login\");\n        }\n    }, []);\n\n    const onInsert = async (title, content) => {\n        try {\n            const response = await boards.insert(title, content);\n            alert(\"등록 완료\");\n\n            // -> 게시글 목록 이동\n            navigate('/boards');\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    return (\n        <BoardInsertForm onInsert={onInsert}/>\n    );\n};\n\nexport default BoardInsertContainer;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/weekContent/SilmaelChangeWrap.jsx",["428"],[],"import React from 'react';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { call } from \"../../../service/api-service\";\n\nconst SilmaelChangeWrap = ({\n                               character,\n                               silmaelChange,\n                               silmaelChangeAll\n                           }) => {\n    return (\n        <div className=\"content-wrap\">\n            <div\n                className=\"content\"\n                style={{\n                    height: 35,\n                    position: \"relative\",\n                    justifyContent: \"space-between\",\n                    fontSize: 14, //pub 수정\n                }}\n            >\n                <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", cursor: \"pointer\" }}\n                    onClick={() => silmaelChange(character.id)}\n                    onContextMenu={(e) => silmaelChangeAll(e, character.id)}\n                >\n                    {/* 여기서 부터 */}\n                    <button\n                        className={`content-button ${character.silmaelChange ? \"done\" : \"\"}`}\n                        style={{ cursor: \"pointer\" }}\n                    >\n                        <CloseIcon />\n                    </button>\n                    {/* 여기까지 클릭 버튼 */}\n                    {/* 여기서 부터 */}\n                    <div\n                        className={`${character.silmaelChange ? \"text-done\" : \"\"}`}\n                        style={{ width: \"100%\" }}>\n                        실마엘 혈석 교환\n                    </div>\n                    {/* 여기까지 출력 글씨 */}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SilmaelChangeWrap;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/weekContent/CubeWrap.jsx",["429"],[],"import React from \"react\";\nimport { call } from \"../../../service/api-service\";\nimport SearchIcon from '@mui/icons-material/Search';\n\nconst CubeWrap = ({\n                      character,\n                      addCubeTicket,\n                      substractCubeTicket,\n                      openCubeAverage,\n                  }) => {\n    return (\n        <div className=\"content-wrap\">\n            <div\n                className=\"content\"\n                style={{\n                    height: 35,\n                    position: \"relative\",\n                    justifyContent: \"space-between\",\n                    fontSize: 14,\n                }}\n            >\n                <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\" }}>\n                    <button\n                        className =\"minus\"\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => substractCubeTicket(character.id)}\n                    >\n                        -\n                    </button>\n                    <div\n                        style={{ width: \"90px\", justifyContent: \"center\", alignItems: \"center\", display: \"flex\" }}\n                    >\n                        {character.cubeTicket} 장\n                    </div>\n                    <button\n                        className =\"plus\"\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => addCubeTicket(character.id)}\n                    >\n                        +\n                    </button>\n                    <div\n                        style={{ width: \"100%\", marginLeft: 10 }}\n                    >\n                        큐브 티켓\n                    </div>\n                    <SearchIcon onClick={() => openCubeAverage(character.itemLevel)} style={{ cursor: \"pointer\" }} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default CubeWrap;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/weekContent/WeekEponaWrap.jsx",["430"],[],"import React from 'react';\nimport CloseIcon from '@mui/icons-material/Close';\nimport {call} from \"../../../service/api-service\";\n\nconst WeekEponaWrap = ({\n                           character,\n                           weekEponaCheck,\n                           weekEponaCheckAll\n                       }) => {\n    return (\n        <div className=\"content-wrap\">\n            <div\n                className=\"content\"\n                style={{\n                    height: 35,\n                    position: \"relative\",\n                    justifyContent: \"space-between\",\n                    fontSize: 14, //pub 수정\n                }}\n            >\n                <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", cursor: \"pointer\"}}\n                     onClick={() => weekEponaCheck(character.id)}\n                     onContextMenu={(e) => weekEponaCheckAll(e, character.id)}\n                >\n                    <button\n                        className={`content-button ${character.weekEpona === 3 ? \"done\" :\n                            character.weekEpona === 1 ? \"ing\" :\n                                character.weekEpona === 2 ? \"ing2\" : \"\"}`}\n                        style={{cursor: \"pointer\"}}\n                    >\n                        <CloseIcon/>\n                    </button>\n                    <div\n                        className={`${character.weekEpona === 3 ? \"text-done\" : \"\"}`}\n                        style={{width: \"100%\"}}\n                    >\n                        주간에포나\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default WeekEponaWrap;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/todo/CharacterSortForm.jsx",["431","432","433"],[],"import React, { useState } from \"react\";\nimport * as todo from '../../apis/todo';\nimport * as friend from '../../apis/friend';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport { Typography } from '@mui/material';\nimport SaveIcon from '@mui/icons-material/Save';\nimport {\n    GridContextProvider,\n    GridDropZone,\n    GridItem,\n    swap,\n} from \"react-grid-dnd\";\n\nconst CharacterSortForm = ({\n    setIsLoading,\n    characters,\n    setCharacters,\n    showMessage,\n    itemsPerRow,\n    setShowCharacterSortForm,\n    friendSetting = null,\n    friendUsername = null\n}) => {\n    //1.순서 변경 캐릭터 리스트 저장\n    const [itemsSwapState, setItemsSwapState] = React.useState(false);\n    function onChange(sourceId, sourceIndex, targetIndex, targetId) {\n        setItemsSwapState(true);\n        const nextState = swap(characters, sourceIndex, targetIndex);\n        for (let i = 0; i < nextState.length; i++) {\n            nextState[i].sortNumber = i;\n        }\n        setCharacters(nextState);\n    }\n\n    //2.순서 변경 DB저장\n    const saveSort = async () => {\n        if (friendSetting === null) {\n            try {\n                setIsLoading(true);\n                const response = await todo.saveSort(characters);\n                showMessage(\"순서 업데이트가 완료되었습니다.\");\n                setShowCharacterSortForm(false);\n            } catch (error) {\n                console.error('Error saveSort:', error);\n            } finally {\n                setIsLoading(false);\n            }\n        } else {\n            if (friendSetting.setting) {\n                try {\n                    setIsLoading(true);\n                    const response = await friend.saveSort(friendUsername, characters);\n                    showMessage(\"순서 업데이트가 완료되었습니다.\");\n                } catch (error) {\n                    console.error('Error updating updateChallenge:', error);\n                } finally {\n                    setIsLoading(false);\n                }\n            } else {\n                showMessage(\"권한이 없습니다.\");\n            }\n\n        }\n    };\n\n    return (\n        <Accordion style={{ backgroundColor: \"rgba(255, 255, 255, 50%)\", width: \"100%\", border: \"1px solid white\" }} className=\"sort-wrap\">\n            <AccordionSummary\n                expandIcon={<ExpandMoreIcon />}\n                style={{ borderRadius: \"5px\" }}\n            >\n                <Typography fontWeight={\"bold\"} display={\"flex\"}>캐릭터 순서 변경\n                    <SaveIcon\n                        onClick={() => saveSort()}\n                        sx={{ display: itemsSwapState ? \"flex\" : \"none\", marginLeft: \"5px\", color: \"blueviolet\", cursor: \"pointer\" }}\n                    >\n                    </SaveIcon>\n                </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n                <GridContextProvider onChange={onChange}>\n                    <GridDropZone\n                        id=\"characters\"\n                        boxesPerRow={itemsPerRow}\n                        rowHeight={80}\n                        style={{ height: 80 * Math.ceil(characters.length / itemsPerRow) }}\n                    >\n                        {characters.map((character) => (\n                            <GridItem key={character.sortNumber} style={{ width: `${100 / itemsPerRow}%` }}>\n                                <div style={{ marginRight: 10 }}>\n                                    <div className=\"character-info-mini\"\n                                        style={{\n                                            backgroundImage: character.characterImage !== null ? `url(${character.characterImage})` : \"\",\n                                            backgroundPosition: character.characterClassName === \"도화가\" || character.characterClassName === \"기상술사\" ? \"left 25px top -70px\" : \"left 25px top -35px\",\n                                            backgroundColor: \"gray\",\n                                        }}>\n                                        <p>{character.characterName}</p>\n                                        <p>Lv. {character.itemLevel}</p>\n                                    </div>\n                                </div>\n                            </GridItem>\n                        ))}\n                    </GridDropZone>\n                    <span className=\"acc-txt\">드래그 시 캐릭터 순서가 변경됩니다</span>\n                </GridContextProvider>\n            </AccordionDetails>\n        </Accordion>\n    );\n};\n\nexport default CharacterSortForm;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/backup/TodoWrap.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/backup/WeekTodoWrap.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/home/HomeContainer.jsx",["434","435"],[],"import React, {useEffect, useState} from 'react';\nimport HomeMain from \"../../components/home/HomeMain\";\n\nconst HomeContainer = ({\n                           setIsLoading,\n                           showMessage\n                       }) => {\n\n    return (\n        <HomeMain\n            setIsLoading={setIsLoading}\n            showMessage={showMessage}\n        />\n    );\n};\n\nexport default HomeContainer;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/home/HomeMain.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/home/HomeBoardContainer.jsx",["436","437","438"],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/home/HomeBoards.jsx",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/boards/BoardText.jsx",["439"],[],"import React from 'react';\nimport DiscordIcon from '../../icons/DiscordIcon';\n\nconst BoardText = () => {\n    return (\n        <div className=\"comments\">\n            <div className=\"noticeBox box01\">\n                <p className=\"notice\">주요 공지사항</p>\n                <div className=\"cont\">\n                    <ul>\n                        <li>개발자 : <DiscordIcon /> 마볼링#2884 <a href=\"https://open.kakao.com/o/snL05upf\" target='_blank'>오픈카톡</a></li>\n                        <li>UI담당자 : <DiscordIcon /> 얀비#7431</li>\n                    </ul>\n                </div>\n                <div className=\"cont\">\n                    <p>사용해주시고 많은 의견주셔서 너무 감사합니다. 최대한 빠르게 업데이트 하도록 해보겠습니다.</p>\n                    <ul>\n                        <li>서버에 접속이 안되는 경우, 보통 업데이트 중이므로 1~2분 후 접속이 가능합니다.</li>\n                        <li>슬라임/메데이아의 경우 서버별로 다르고, 길드가 직접 운영하기 때문에 추가가 어려울 것 같습니다.</li>\n                    </ul>\n                </div>\n                <div className=\"cont\">\n                    <p style={{ fontWeight: \"bold\" }}>개발자에게 커피 한잔</p>\n                    <ul>\n                        <li>보내주신 소중한 후원금은 서버 유지 및 발전 비용으로 사용됩니다.</li>\n                        <li>카카오뱅크 3333-08-6962739</li>\n                        <li>예금주 : 이민혁</li>\n                    </ul>\n                </div>\n            </div>\n            {/*<div className=\"noticeBox box02\">*/}\n            {/*    <p className=\"update\">개발 예정</p>*/}\n            {/*    <div className=\"cont\">*/}\n            {/*        <ul>*/}\n            {/*            <li>카게, 모험섬, 필보, 로웬 주간퀘 등 - 페이지를 따로 분리할 예정입니다.</li>*/}\n            {/*            <li>기록남기기 - 숙제로 얻은 수익을 기록하여 그래프 혹은 표로 표시</li>*/}\n            {/*            <li>데이터보기 - 일일숙제, 큐브로 얻는 재화량 통계와 현재 경매장 시세를 확인, 귀속 재료도 수익확인</li>*/}\n            {/*            <li>캐릭터 info - 로아와, 클로아, 일로아와 유사한 기능</li>*/}\n            {/*        </ul>*/}\n            {/*    </div>*/}\n            {/*</div>*/}\n        </div>\n    );\n};\n\nexport default BoardText;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/containers/home/HomeNoticesContainer.jsx",["440","441","442"],[],"import React, {useEffect, useState} from 'react';\nimport * as notices from \"../../apis/notices\";\nimport HomeNotices from \"../../components/home/HomeNotices\";\n\nconst HomeBoardContainer = ({\n                                setIsLoading,\n                                showMessage\n                            }) => {\n    const [noticesList, setNoticesList] = useState([]);\n    const [totalPages, setTotalPages] = useState(1);\n    const [currentPage, setCurrentPage] = useState(1);\n\n    // 사이트 공지사항  데이터\n    const getNoticesList = async (page, size) => {\n        setIsLoading(true);\n        try {\n            const data = await notices.list(page, size);\n            setNoticesList(data.noticesList);\n            setTotalPages(data.totalPages);\n        } catch (error) {\n            console.log(error);\n        } finally {\n            setIsLoading(false);\n        }\n    }\n\n    useEffect(() => {\n        getNoticesList(currentPage, 5);\n    }, [currentPage]);\n\n    return (<HomeNotices\n        noticesList={noticesList}\n    />);\n};\n\nexport default HomeBoardContainer;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/apis/notices.js",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/home/HomeNotices.jsx",["443"],[],"import React from 'react';\n\nconst HomeBoards = ({\n                        noticesList\n                    }) => {\n    const isRecent = (date) => {\n        const currentDate = new Date();\n        const boardDate = new Date(date);\n        const timeDifference = currentDate - boardDate;\n        const daysDifference = timeDifference / (1000 * 60 * 60 * 24);\n        return daysDifference < 2;\n    };\n    return (\n        <div className=\"notice-board-container\">\n            <div className=\"notice-board-header\">\n                <a href=\"/boards\" className=\"notice-board-link\">로스트아크 공지사항</a>\n            </div>\n            <div className=\"notice-board-list\">\n                <ul className=\"board-ul\">\n                    {noticesList.map((notices) => (\n                        <li key={notices.id} className=\"board-item\">\n                            <div className=\"board-link\">\n                                <div className=\"board-category\" aria-label=\"카테고리\">\n                                    <span className=\"category-span\">{notices.type}</span>\n                                </div>\n                                <div className=\"board-title\" aria-label=\"제목\">\n                                    <a href={`${notices.link}`} target=\"_blank\" className=\"title-span\">{notices.title}</a>\n                                </div>\n                                {isRecent(notices.date) && <div className=\"board-new\">N</div>}\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </div>\n\n    );\n};\n\nexport default HomeBoards;","/Users/minhyeok/Desktop/LostarkTodo/Front/src/apis/auth.js",[],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/notification/NotificationComponent.jsx",["444","445"],[],"/Users/minhyeok/Desktop/LostarkTodo/Front/src/fragments/KaKaoAd.js",["446","447"],[],"import React, { useEffect, useRef } from 'react';\n\nconst KaKaoAd = ({unit, width, height}) => {\n    const KakaoLoadOne=()=>{\n        let ins = document.createElement('ins');\n        let scr = document.createElement('script');\n    \n        ins.className = 'kakao_ad_area';\n        ins.style = \"display:none; width:100%;\";\n        scr.async = 'true';\n        scr.type = \"text/javascript\";\n        scr.src = \"//t1.daumcdn.net/kas/static/ba.min.js\";\n        ins.setAttribute('data-ad-width', width);\n        ins.setAttribute('data-ad-height', height);\n        ins.setAttribute('data-ad-unit', unit);\n    \n        document.querySelector('.adfitOne').appendChild(ins);\n        document.querySelector('.adfitOne').appendChild(scr);\n      }\n\n    useEffect(() => {\n        KakaoLoadOne();\n    }, []);\n\n    return (\n        <div className='adfitOne'></div>\n    );\n};\n\nexport default KaKaoAd;",{"ruleId":"448","severity":1,"message":"449","line":3,"column":8,"nodeType":"450","messageId":"451","endLine":3,"endColumn":18},{"ruleId":"448","severity":1,"message":"452","line":4,"column":8,"nodeType":"450","messageId":"451","endLine":4,"endColumn":16},{"ruleId":"448","severity":1,"message":"453","line":5,"column":8,"nodeType":"450","messageId":"451","endLine":5,"endColumn":17},{"ruleId":"448","severity":1,"message":"454","line":6,"column":10,"nodeType":"450","messageId":"451","endLine":6,"endColumn":14},{"ruleId":"448","severity":1,"message":"455","line":9,"column":8,"nodeType":"450","messageId":"451","endLine":9,"endColumn":26},{"ruleId":"448","severity":1,"message":"456","line":1,"column":17,"nodeType":"450","messageId":"451","endLine":1,"endColumn":25},{"ruleId":"448","severity":1,"message":"457","line":8,"column":8,"nodeType":"450","messageId":"451","endLine":8,"endColumn":14},{"ruleId":"448","severity":1,"message":"458","line":9,"column":8,"nodeType":"450","messageId":"451","endLine":9,"endColumn":19},{"ruleId":"448","severity":1,"message":"459","line":10,"column":8,"nodeType":"450","messageId":"451","endLine":10,"endColumn":14},{"ruleId":"448","severity":1,"message":"460","line":11,"column":8,"nodeType":"450","messageId":"451","endLine":11,"endColumn":16},{"ruleId":"448","severity":1,"message":"461","line":2,"column":10,"nodeType":"450","messageId":"451","endLine":2,"endColumn":19},{"ruleId":"448","severity":1,"message":"462","line":3,"column":10,"nodeType":"450","messageId":"451","endLine":3,"endColumn":14},{"ruleId":"463","severity":1,"message":"464","line":46,"column":30,"nodeType":"465","messageId":"466","endLine":46,"endColumn":32},{"ruleId":"467","severity":1,"message":"468","line":50,"column":17,"nodeType":"469","messageId":"470","endLine":50,"endColumn":75,"fix":"471"},{"ruleId":"448","severity":1,"message":"472","line":3,"column":8,"nodeType":"450","messageId":"451","endLine":3,"endColumn":19},{"ruleId":"448","severity":1,"message":"473","line":4,"column":8,"nodeType":"450","messageId":"451","endLine":4,"endColumn":18},{"ruleId":"474","severity":1,"message":"475","line":33,"column":8,"nodeType":"476","endLine":33,"endColumn":21,"suggestions":"477"},{"ruleId":"478","severity":1,"message":"479","line":42,"column":11,"nodeType":"469","endLine":42,"endColumn":39},{"ruleId":"474","severity":1,"message":"480","line":69,"column":8,"nodeType":"476","endLine":69,"endColumn":10,"suggestions":"481"},{"ruleId":"482","severity":1,"message":"483","line":14,"column":21,"nodeType":"469","endLine":19,"endColumn":22},{"ruleId":"482","severity":1,"message":"483","line":28,"column":25,"nodeType":"469","endLine":33,"endColumn":26},{"ruleId":"482","severity":1,"message":"483","line":45,"column":25,"nodeType":"469","endLine":50,"endColumn":26},{"ruleId":"482","severity":1,"message":"483","line":63,"column":13,"nodeType":"469","endLine":63,"endColumn":90},{"ruleId":"482","severity":1,"message":"483","line":66,"column":13,"nodeType":"469","endLine":66,"endColumn":103},{"ruleId":"482","severity":1,"message":"483","line":70,"column":13,"nodeType":"469","endLine":70,"endColumn":103},{"ruleId":"482","severity":1,"message":"483","line":73,"column":13,"nodeType":"469","endLine":73,"endColumn":98},{"ruleId":"448","severity":1,"message":"484","line":5,"column":8,"nodeType":"450","messageId":"451","endLine":5,"endColumn":21},{"ruleId":"448","severity":1,"message":"485","line":6,"column":8,"nodeType":"450","messageId":"451","endLine":6,"endColumn":25},{"ruleId":"448","severity":1,"message":"486","line":7,"column":8,"nodeType":"450","messageId":"451","endLine":7,"endColumn":16},{"ruleId":"448","severity":1,"message":"487","line":2,"column":8,"nodeType":"450","messageId":"451","endLine":2,"endColumn":17},{"ruleId":"448","severity":1,"message":"488","line":4,"column":9,"nodeType":"450","messageId":"451","endLine":4,"endColumn":20},{"ruleId":"474","severity":1,"message":"489","line":25,"column":8,"nodeType":"476","endLine":25,"endColumn":10,"suggestions":"490"},{"ruleId":"474","severity":1,"message":"491","line":16,"column":8,"nodeType":"476","endLine":16,"endColumn":10,"suggestions":"492"},{"ruleId":"448","severity":1,"message":"493","line":20,"column":19,"nodeType":"450","messageId":"451","endLine":20,"endColumn":27},{"ruleId":"448","severity":1,"message":"494","line":3,"column":10,"nodeType":"450","messageId":"451","endLine":3,"endColumn":14},{"ruleId":"448","severity":1,"message":"494","line":2,"column":10,"nodeType":"450","messageId":"451","endLine":2,"endColumn":14},{"ruleId":"448","severity":1,"message":"494","line":3,"column":9,"nodeType":"450","messageId":"451","endLine":3,"endColumn":13},{"ruleId":"448","severity":1,"message":"456","line":1,"column":17,"nodeType":"450","messageId":"451","endLine":1,"endColumn":25},{"ruleId":"448","severity":1,"message":"493","line":43,"column":23,"nodeType":"450","messageId":"451","endLine":43,"endColumn":31},{"ruleId":"448","severity":1,"message":"493","line":55,"column":27,"nodeType":"450","messageId":"451","endLine":55,"endColumn":35},{"ruleId":"448","severity":1,"message":"495","line":1,"column":16,"nodeType":"450","messageId":"451","endLine":1,"endColumn":25},{"ruleId":"448","severity":1,"message":"456","line":1,"column":27,"nodeType":"450","messageId":"451","endLine":1,"endColumn":35},{"ruleId":"448","severity":1,"message":"496","line":10,"column":12,"nodeType":"450","messageId":"451","endLine":10,"endColumn":22},{"ruleId":"448","severity":1,"message":"497","line":11,"column":25,"nodeType":"450","messageId":"451","endLine":11,"endColumn":39},{"ruleId":"474","severity":1,"message":"498","line":29,"column":8,"nodeType":"476","endLine":29,"endColumn":21,"suggestions":"499"},{"ruleId":"467","severity":1,"message":"468","line":11,"column":60,"nodeType":"469","messageId":"470","endLine":11,"endColumn":120,"fix":"500"},{"ruleId":"448","severity":1,"message":"496","line":10,"column":12,"nodeType":"450","messageId":"451","endLine":10,"endColumn":22},{"ruleId":"448","severity":1,"message":"497","line":11,"column":25,"nodeType":"450","messageId":"451","endLine":11,"endColumn":39},{"ruleId":"474","severity":1,"message":"501","line":29,"column":8,"nodeType":"476","endLine":29,"endColumn":21,"suggestions":"502"},{"ruleId":"467","severity":1,"message":"468","line":27,"column":37,"nodeType":"469","messageId":"470","endLine":27,"endColumn":104,"fix":"503"},{"ruleId":"448","severity":1,"message":"495","line":1,"column":17,"nodeType":"450","messageId":"451","endLine":1,"endColumn":26},{"ruleId":"448","severity":1,"message":"504","line":8,"column":27,"nodeType":"450","messageId":"451","endLine":8,"endColumn":43},{"ruleId":"448","severity":1,"message":"505","line":1,"column":28,"nodeType":"450","messageId":"451","endLine":1,"endColumn":34},{"ruleId":"474","severity":1,"message":"506","line":23,"column":8,"nodeType":"476","endLine":23,"endColumn":10,"suggestions":"507"},"no-unused-vars","'SearchIcon' is defined but never used.","Identifier","unusedVar","'DoneIcon' is defined but never used.","'CloseIcon' is defined but never used.","'Grid' is defined but never used.","'FriendWeekTodoWrap' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'useParams' is defined but never used.","'Link' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"508","text":"509"},"'CommentList' is defined but never used.","'PageNation' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getComment'. Either include it or remove the dependency array.","ArrayExpression",["510"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'getCharacters'. Either include it or remove the dependency array.",["511"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'WeekEponaWrap' is defined but never used.","'SilmaelChangeWrap' is defined but never used.","'CubeWrap' is defined but never used.","'SearchBox' is defined but never used.","'listDefault' is defined but never used.","React Hook useEffect has a missing dependency: 'getBoard'. Either include it or remove the dependency array.",["512"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["513"],"'response' is assigned a value but never used.","'call' is defined but never used.","'useEffect' is defined but never used.","'totalPages' is assigned a value but never used.","'setCurrentPage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getBoardList'. Either include it or remove the dependency array.",["514"],{"range":"515","text":"509"},"React Hook useEffect has a missing dependency: 'getNoticesList'. Either include it or remove the dependency array.",["516"],{"range":"517","text":"509"},"'setNotifications' is assigned a value but never used.","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'KakaoLoadOne'. Either include it or remove the dependency array.",["518"],[1529,1529]," rel=\"noreferrer\"",{"desc":"519","fix":"520"},{"desc":"521","fix":"522"},{"desc":"523","fix":"524"},{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},[431,431],{"desc":"529","fix":"530"},[1268,1268],{"desc":"531","fix":"532"},"Update the dependencies array to be: [currentPage, getComment]",{"range":"533","text":"534"},"Update the dependencies array to be: [getCharacters]",{"range":"535","text":"536"},"Update the dependencies array to be: [getBoard]",{"range":"537","text":"538"},"Update the dependencies array to be: [navigate]",{"range":"539","text":"540"},"Update the dependencies array to be: [currentPage, getBoardList]",{"range":"541","text":"542"},"Update the dependencies array to be: [currentPage, getNoticesList]",{"range":"543","text":"544"},"Update the dependencies array to be: [KakaoLoadOne]",{"range":"545","text":"546"},[1154,1167],"[currentPage, getComment]",[2247,2249],"[getCharacters]",[610,612],"[getBoard]",[513,515],"[navigate]",[932,945],"[currentPage, getBoardList]",[938,951],"[currentPage, getNoticesList]",[787,789],"[KakaoLoadOne]"]