{"ast":null,"code":"import { API_BASE_URL } from \"../config/api-config\";\nexport function call(api, method, request) {\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  });\n\n  // 로컬 스토리지에서 ACCESS TOKEN 가져오기\n  const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n  if (accessToken && accessToken !== null) {\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\n  }\n  let options = {\n    headers: headers,\n    url: API_BASE_URL + api,\n    method: method\n  };\n  if (request) {\n    options.body = JSON.stringify(request);\n  }\n  return fetch(options.url, options).then(response => {\n    if (response.status === 200) {\n      return response.json();\n    } else {\n      throw response.json();\n    }\n  }).catch(error => {\n    return error.then(errorMessage => {\n      throw errorMessage;\n    });\n  });\n}\nexport function login(userDTO) {\n  return call(\"/auth/login\", \"POST\", userDTO).then(response => {\n    if (response.token) {\n      // 로컬 스토리지에 토큰 저장\n      localStorage.setItem(\"ACCESS_TOKEN\", response.token);\n      // token이 존재하는 경우 Todo 화면으로 리디렉트\n      window.location.href = \"/\";\n    }\n  });\n}\nexport function logout() {\n  localStorage.setItem(\"ACCESS_TOKEN\", null);\n  window.location.href = \"/login\";\n}\nexport function signup(userDTO) {\n  return call(\"/auth/signup\", \"POST\", userDTO);\n}","map":{"version":3,"names":["API_BASE_URL","call","api","method","request","headers","Headers","accessToken","localStorage","getItem","append","options","url","body","JSON","stringify","fetch","then","response","status","json","catch","error","errorMessage","login","userDTO","token","setItem","window","location","href","logout","signup"],"sources":["/Users/minhyeok/Desktop/LostarkTodo/Front/src/service/api-service.jsx"],"sourcesContent":["import { API_BASE_URL } from \"../config/api-config\";\n\nexport function call(api, method, request) {\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\",\n  });\n\n  // 로컬 스토리지에서 ACCESS TOKEN 가져오기\n  const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n  if (accessToken && accessToken !== null) {\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\n  }\n\n  let options = {\n    headers: headers,\n    url: API_BASE_URL + api,\n    method: method,\n  };\n\n  if (request) {\n    options.body = JSON.stringify(request);\n  }\n\n  return fetch(options.url, options).then((response) => {\n    if (response.status === 200) {\n      return response.json();\n    } else {\n      throw response.json();\n    }\n  }).catch((error) => {\n    return error.then((errorMessage) => {\n      throw errorMessage;\n    });\n  });\n}\n\nexport function login(userDTO) {\n  return call(\"/auth/login\", \"POST\", userDTO)\n    .then((response) => {\n      if (response.token) {\n        // 로컬 스토리지에 토큰 저장\n        localStorage.setItem(\"ACCESS_TOKEN\", response.token);\n        // token이 존재하는 경우 Todo 화면으로 리디렉트\n        window.location.href = \"/\";\n      }\n    });\n}\n\nexport function logout() {\n  localStorage.setItem(\"ACCESS_TOKEN\", null);\n  window.location.href = \"/login\";\n}\n\nexport function signup(userDTO) {\n  return call(\"/auth/signup\", \"POST\", userDTO);\n}"],"mappings":"AAAA,SAASA,YAAY,QAAQ,sBAAsB;AAEnD,OAAO,SAASC,IAAIA,CAACC,GAAG,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACzC,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAAC;IACxB,cAAc,EAAE;EAClB,CAAC,CAAC;;EAEF;EACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EACxD,IAAIF,WAAW,IAAIA,WAAW,KAAK,IAAI,EAAE;IACvCF,OAAO,CAACK,MAAM,CAAC,eAAe,EAAE,SAAS,GAAGH,WAAW,CAAC;EAC1D;EAEA,IAAII,OAAO,GAAG;IACZN,OAAO,EAAEA,OAAO;IAChBO,GAAG,EAAEZ,YAAY,GAAGE,GAAG;IACvBC,MAAM,EAAEA;EACV,CAAC;EAED,IAAIC,OAAO,EAAE;IACXO,OAAO,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACX,OAAO,CAAC;EACxC;EAEA,OAAOY,KAAK,CAACL,OAAO,CAACC,GAAG,EAAED,OAAO,CAAC,CAACM,IAAI,CAAEC,QAAQ,IAAK;IACpD,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAC3B,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;IACxB,CAAC,MAAM;MACL,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;IACvB;EACF,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;IAClB,OAAOA,KAAK,CAACL,IAAI,CAAEM,YAAY,IAAK;MAClC,MAAMA,YAAY;IACpB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,OAAO,SAASC,KAAKA,CAACC,OAAO,EAAE;EAC7B,OAAOxB,IAAI,CAAC,aAAa,EAAE,MAAM,EAAEwB,OAAO,CAAC,CACxCR,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAIA,QAAQ,CAACQ,KAAK,EAAE;MAClB;MACAlB,YAAY,CAACmB,OAAO,CAAC,cAAc,EAAET,QAAQ,CAACQ,KAAK,CAAC;MACpD;MACAE,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;IAC5B;EACF,CAAC,CAAC;AACN;AAEA,OAAO,SAASC,MAAMA,CAAA,EAAG;EACvBvB,YAAY,CAACmB,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;EAC1CC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;AACjC;AAEA,OAAO,SAASE,MAAMA,CAACP,OAAO,EAAE;EAC9B,OAAOxB,IAAI,CAAC,cAAc,EAAE,MAAM,EAAEwB,OAAO,CAAC;AAC9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}