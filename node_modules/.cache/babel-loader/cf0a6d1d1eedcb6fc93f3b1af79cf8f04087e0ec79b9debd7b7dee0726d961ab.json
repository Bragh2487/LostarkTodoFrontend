{"ast":null,"code":"import{API_BASE_URL}from\"../config/api-config\";export function call(api,method,request){var headers=new Headers({\"Content-Type\":\"application/json\"});// 로컬 스토리지에서 ACCESS TOKEN 가져오기\nvar accessToken=localStorage.getItem(\"ACCESS_TOKEN\");if(accessToken&&accessToken!==null){headers.append(\"Authorization\",\"Bearer \"+accessToken);}var options={headers:headers,url:API_BASE_URL+api,method:method};if(request){options.body=JSON.stringify(request);}return fetch(options.url,options).then(function(response){if(response.status===200){return response.json();}else if(response.status===403){window.location.href=\"/login\";throw response.json();}else{throw response.json();}}).catch(function(error){return error.then(function(errorMessage){throw errorMessage;});});}export function login(userDTO){return call(\"/auth/login\",\"POST\",userDTO).then(function(response){if(response.token){// 로컬 스토리지에 토큰 저장\nlocalStorage.setItem(\"ACCESS_TOKEN\",response.token);// token이 존재하는 경우 Todo 화면으로 리디렉트\nwindow.location.href=\"/\";}});}export function logout(){call(\"/auth/logout\",\"GET\",null).then(function(response){});localStorage.setItem(\"ACCESS_TOKEN\",null);window.location.href=\"/login\";}export function signup(userDTO){return call(\"/member/signup\",\"POST\",userDTO);}export function socialLogin(provider){var frontendUrl=window.location.protocol+\"//\"+window.location.host;window.location.href=API_BASE_URL+\"/auth/authorize/\"+provider+\"?redirect_url=\"+frontendUrl;}","map":{"version":3,"names":["API_BASE_URL","call","api","method","request","headers","Headers","accessToken","localStorage","getItem","append","options","url","body","JSON","stringify","fetch","then","response","status","json","window","location","href","catch","error","errorMessage","login","userDTO","token","setItem","logout","signup","socialLogin","provider","frontendUrl","protocol","host"],"sources":["/Users/minhyeok/Desktop/LostarkTodo/Front/src/service/api-service.jsx"],"sourcesContent":["import { API_BASE_URL } from \"../config/api-config\";\n\nexport function call(api, method, request) {\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\",\n  });\n\n  // 로컬 스토리지에서 ACCESS TOKEN 가져오기\n  const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n  if (accessToken && accessToken !== null) {\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\n  }\n\n  let options = {\n    headers: headers,\n    url: API_BASE_URL + api,\n    method: method,\n  };\n\n  if (request) {\n    options.body = JSON.stringify(request);\n  }\n\n  return fetch(options.url, options).then((response) => {\n    if (response.status === 200) {\n      return response.json();\n    } else if (response.status === 403) {\n      window.location.href = \"/login\";\n      throw response.json();\n    } else {\n      throw response.json();\n    }\n  }).catch((error) => {\n    return error.then((errorMessage) => {\n      throw errorMessage;\n    });\n  });\n}\n\nexport function login(userDTO) {\n  return call(\"/auth/login\", \"POST\", userDTO)\n    .then((response) => {\n      if (response.token) {\n        // 로컬 스토리지에 토큰 저장\n        localStorage.setItem(\"ACCESS_TOKEN\", response.token);\n        // token이 존재하는 경우 Todo 화면으로 리디렉트\n        window.location.href = \"/\";\n      }\n    });\n}\n\nexport function logout() {\n  call(\"/auth/logout\", \"GET\", null).then((response) => {});\n  localStorage.setItem(\"ACCESS_TOKEN\", null);\n  window.location.href = \"/login\";\n}\n\nexport function signup(userDTO) {\n  return call(\"/member/signup\", \"POST\", userDTO);\n}\n\nexport function socialLogin(provider) {\n  const frontendUrl = window.location.protocol + \"//\" + window.location.host;\n  window.location.href = API_BASE_URL + \"/auth/authorize/\" + provider + \"?redirect_url=\" + frontendUrl;\n}"],"mappings":"AAAA,OAASA,YAAY,KAAQ,sBAAsB,CAEnD,MAAO,SAAS,CAAAC,IAAIA,CAACC,GAAG,CAAEC,MAAM,CAAEC,OAAO,CAAE,CACzC,GAAI,CAAAC,OAAO,CAAG,GAAI,CAAAC,OAAO,CAAC,CACxB,cAAc,CAAE,kBAClB,CAAC,CAAC,CAEF;AACA,GAAM,CAAAC,WAAW,CAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CACxD,GAAIF,WAAW,EAAIA,WAAW,GAAK,IAAI,CAAE,CACvCF,OAAO,CAACK,MAAM,CAAC,eAAe,CAAE,SAAS,CAAGH,WAAW,CAAC,CAC1D,CAEA,GAAI,CAAAI,OAAO,CAAG,CACZN,OAAO,CAAEA,OAAO,CAChBO,GAAG,CAAEZ,YAAY,CAAGE,GAAG,CACvBC,MAAM,CAAEA,MACV,CAAC,CAED,GAAIC,OAAO,CAAE,CACXO,OAAO,CAACE,IAAI,CAAGC,IAAI,CAACC,SAAS,CAACX,OAAO,CAAC,CACxC,CAEA,MAAO,CAAAY,KAAK,CAACL,OAAO,CAACC,GAAG,CAAED,OAAO,CAAC,CAACM,IAAI,CAAC,SAACC,QAAQ,CAAK,CACpD,GAAIA,QAAQ,CAACC,MAAM,GAAK,GAAG,CAAE,CAC3B,MAAO,CAAAD,QAAQ,CAACE,IAAI,CAAC,CAAC,CACxB,CAAC,IAAM,IAAIF,QAAQ,CAACC,MAAM,GAAK,GAAG,CAAE,CAClCE,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,QAAQ,CAC/B,KAAM,CAAAL,QAAQ,CAACE,IAAI,CAAC,CAAC,CACvB,CAAC,IAAM,CACL,KAAM,CAAAF,QAAQ,CAACE,IAAI,CAAC,CAAC,CACvB,CACF,CAAC,CAAC,CAACI,KAAK,CAAC,SAACC,KAAK,CAAK,CAClB,MAAO,CAAAA,KAAK,CAACR,IAAI,CAAC,SAACS,YAAY,CAAK,CAClC,KAAM,CAAAA,YAAY,CACpB,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAEA,MAAO,SAAS,CAAAC,KAAKA,CAACC,OAAO,CAAE,CAC7B,MAAO,CAAA3B,IAAI,CAAC,aAAa,CAAE,MAAM,CAAE2B,OAAO,CAAC,CACxCX,IAAI,CAAC,SAACC,QAAQ,CAAK,CAClB,GAAIA,QAAQ,CAACW,KAAK,CAAE,CAClB;AACArB,YAAY,CAACsB,OAAO,CAAC,cAAc,CAAEZ,QAAQ,CAACW,KAAK,CAAC,CACpD;AACAR,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,GAAG,CAC5B,CACF,CAAC,CAAC,CACN,CAEA,MAAO,SAAS,CAAAQ,MAAMA,CAAA,CAAG,CACvB9B,IAAI,CAAC,cAAc,CAAE,KAAK,CAAE,IAAI,CAAC,CAACgB,IAAI,CAAC,SAACC,QAAQ,CAAK,CAAC,CAAC,CAAC,CACxDV,YAAY,CAACsB,OAAO,CAAC,cAAc,CAAE,IAAI,CAAC,CAC1CT,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,QAAQ,CACjC,CAEA,MAAO,SAAS,CAAAS,MAAMA,CAACJ,OAAO,CAAE,CAC9B,MAAO,CAAA3B,IAAI,CAAC,gBAAgB,CAAE,MAAM,CAAE2B,OAAO,CAAC,CAChD,CAEA,MAAO,SAAS,CAAAK,WAAWA,CAACC,QAAQ,CAAE,CACpC,GAAM,CAAAC,WAAW,CAAGd,MAAM,CAACC,QAAQ,CAACc,QAAQ,CAAG,IAAI,CAAGf,MAAM,CAACC,QAAQ,CAACe,IAAI,CAC1EhB,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAGvB,YAAY,CAAG,kBAAkB,CAAGkC,QAAQ,CAAG,gBAAgB,CAAGC,WAAW,CACtG"},"metadata":{},"sourceType":"module","externalDependencies":[]}