{"ast":null,"code":"var _jsxFileName = \"/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/TodoSortForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport './Todo.css';\nimport Navbar from '../fragments/Navbar';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { call } from \"../service/api-service\";\nimport Box from '@mui/material/Box';\nimport { Button } from \"@mui/material\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TodoSortForm() {\n  _s();\n  const navigate = useNavigate();\n  const [characters, setCharacters] = useState([]);\n  const [notification, setNotification] = useState(null); // 상태 추가\n\n  // 초기 캐릭터 정보 불러오기\n  useEffect(() => {\n    call(\"/member/characterList\", \"GET\", null).then(response => {\n      setCharacters(response);\n    });\n  }, []);\n  const onDragEnd = result => {\n    if (!result.destination) {\n      return; // Item was dropped outside of the list\n    }\n\n    // Reorder characters array based on the drag-and-drop result\n    const reorderedCharacters = [...characters];\n    const movedCharacter = reorderedCharacters.splice(result.source.index, 1)[0]; // Remove the item from the source index\n    reorderedCharacters.splice(result.destination.index, 0, movedCharacter); // Insert the item at the destination index\n\n    // Update the sortNumber of characters based on their new order\n    reorderedCharacters.forEach((character, index) => {\n      character.sortNumber = index;\n    });\n\n    // Update the state with the reordered characters\n    setCharacters(reorderedCharacters);\n  };\n  const grid = 5;\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: \"none\",\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n    color: \"white\",\n    // change background colour if dragging\n    background: isDragging ? \"lightgreen\" : \"grey\",\n    // styles we need to apply on draggables\n    ...draggableStyle\n  });\n  const getListStyle = isDraggingOver => ({\n    margin: \"0 0 0 40px\",\n    padding: grid,\n    width: 300,\n    background: isDraggingOver ? \"lightblue\" : \"lightgrey\"\n  });\n  const save = () => {\n    setNotification(\"진행중...\");\n    call(\"/member/characterList/sorting\", \"PATCH\", characters).then(response => {\n      alert(\"순서 업데이트가 완료되었습니다.\");\n      navigate(\"/\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      height: 20\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => save(),\n      style: {\n        border: \"1px solid blue\"\n      },\n      children: \"\\uC800\\uC7A5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"characterList\",\n        children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n          ...provided.droppableProps,\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          children: [characters.map((character, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: character.id.toString(),\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              ref: provided.innerRef,\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"Lv. \", character.itemLevel, \" \", character.characterClassName, \" : \", character.characterName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 45\n              }, this)\n            }, character.id.toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 41\n            }, this)\n          }, character.id.toString(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 33\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `notification ${notification ? \"show\" : \"\"}`,\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n_s(TodoSortForm, \"oDM3BsIWOC5asX4uKVmGYCtpiq0=\", false, function () {\n  return [useNavigate];\n});\n_c = TodoSortForm;\nexport default TodoSortForm;\nvar _c;\n$RefreshReg$(_c, \"TodoSortForm\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","DragDropContext","Droppable","Draggable","call","Box","Button","useNavigate","jsxDEV","_jsxDEV","TodoSortForm","_s","navigate","characters","setCharacters","notification","setNotification","then","response","onDragEnd","result","destination","reorderedCharacters","movedCharacter","splice","source","index","forEach","character","sortNumber","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","color","background","getListStyle","isDraggingOver","width","save","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","height","onClick","style","border","droppableId","provided","snapshot","droppableProps","ref","innerRef","map","draggableId","id","toString","draggableProps","dragHandleProps","itemLevel","characterClassName","characterName","placeholder","className","_c","$RefreshReg$"],"sources":["/Users/minhyeok/Desktop/LostarkTodo/Front/src/components/TodoSortForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './Todo.css';\nimport Navbar from '../fragments/Navbar';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { call } from \"../service/api-service\";\nimport Box from '@mui/material/Box';\nimport { Button } from \"@mui/material\";\nimport { useNavigate } from 'react-router-dom';\n\n\nfunction TodoSortForm() {\n    const navigate = useNavigate();\n    const [characters, setCharacters] = useState([]);\n    const [notification, setNotification] = useState(null); // 상태 추가\n\n    // 초기 캐릭터 정보 불러오기\n    useEffect(() => {\n        call(\"/member/characterList\", \"GET\", null)\n            .then((response) => {\n                setCharacters(response);\n            });\n    }, []);\n\n\n    const onDragEnd = (result) => {\n        if (!result.destination) {\n            return; // Item was dropped outside of the list\n        }\n\n        // Reorder characters array based on the drag-and-drop result\n        const reorderedCharacters = [...characters];\n        const movedCharacter = reorderedCharacters.splice(result.source.index, 1)[0]; // Remove the item from the source index\n        reorderedCharacters.splice(result.destination.index, 0, movedCharacter); // Insert the item at the destination index\n\n        // Update the sortNumber of characters based on their new order\n        reorderedCharacters.forEach((character, index) => {\n            character.sortNumber = index;\n        });\n\n        // Update the state with the reordered characters\n        setCharacters(reorderedCharacters);\n    };\n\n    const grid = 5;\n\n    const getItemStyle = (isDragging, draggableStyle) => ({\n        // some basic styles to make the items look a bit nicer\n        userSelect: \"none\",\n        padding: grid * 2,\n        margin: `0 0 ${grid}px 0`,\n\n        color: \"white\",\n\n        // change background colour if dragging\n        background: isDragging ? \"lightgreen\" : \"grey\",\n\n        // styles we need to apply on draggables\n        ...draggableStyle\n    });\n\n    const getListStyle = isDraggingOver => ({\n        margin: \"0 0 0 40px\",\n        padding: grid,\n        width: 300,\n        background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n    });\n\n    const save = () => {\n        setNotification(\"진행중...\");\n        call(\"/member/characterList/sorting\", \"PATCH\", characters)\n            .then((response) => {\n                alert(\"순서 업데이트가 완료되었습니다.\");\n                navigate(\"/\");\n            });\n    };\n\n    return (\n        <div>\n            <Navbar />\n            <Box height={20} />\n            <Button onClick={() => save()} style={{ border: \"1px solid blue\" }}>저장</Button>\n            <DragDropContext onDragEnd={onDragEnd}>\n                <Droppable droppableId=\"characterList\">\n                    {(provided, snapshot) => (\n                        <div {...provided.droppableProps} ref={provided.innerRef} style={getListStyle(snapshot.isDraggingOver)}\n                        >\n                            {characters.map((character, index) => (\n                                <Draggable key={character.id.toString()} draggableId={character.id.toString()} index={index}>\n                                    {(provided) => (\n                                        <div key={character.id.toString()} {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}\n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            <h3>Lv. {character.itemLevel} {character.characterClassName} : {character.characterName}</h3>\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n            <div\n                className={`notification ${notification ? \"show\" : \"\"}`}\n            >\n                {notification}\n            </div>\n        </div>\n    );\n}\n\nexport default TodoSortForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}