{"ast":null,"code":"var _jsxFileName = \"/Users/minhyeok/Desktop/LostarkTodo/Front/src/comments/Comments.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { call } from \"../service/api-service\";\nimport './Comments.css';\nimport Comment from \"./Commnet\";\nimport CommentForm from \"./CommentForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comments = () => {\n  _s();\n  const [backendComments, setBackendComments] = useState([]);\n  const [activeComment, setActiveComment] = useState(null);\n  const rootComments = backendComments.filter(backendComment => backendComment.parentId === 0);\n  const getReplies = commentId => backendComments.filter(backendComment => backendComment.parentId === commentId).sort((a, b) => new Date(a.lastModifiedDate).getTime() - new Date(b.lastModifiedDate).getTime());\n  useEffect(() => {\n    // 초기 캐릭터 정보 불러오기\n    call(\"/comments\", \"GET\", null).then(response => {\n      setBackendComments(response);\n    }).catch(error => {\n      console.log(error.errorMessage);\n    });\n  }, []);\n  const addComment = (text, parentId = null) => {\n    const updateContent = {\n      body: text,\n      parentId: parentId\n    };\n    call(\"/comments\", \"POST\", updateContent).then(response => {\n      setBackendComments([response, ...response]);\n      setActiveComment(null);\n    }).catch(error => {\n      console.log(error.errorMessage);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"comments-title\",\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-form-title\",\n      children: \"Write comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n      submitLabel: \"Write\",\n      handleSubmit: addComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-container\",\n      children: rootComments.map(rootComment => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: rootComment,\n        replies: getReplies(rootComment.id)\n      }, rootComment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(Comments, \"Nh9uypyQCza2uraZ+lh8htJiD1M=\");\n_c = Comments;\nexport default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useState","useEffect","call","Comment","CommentForm","jsxDEV","_jsxDEV","Comments","_s","backendComments","setBackendComments","activeComment","setActiveComment","rootComments","filter","backendComment","parentId","getReplies","commentId","sort","a","b","Date","lastModifiedDate","getTime","then","response","catch","error","console","log","errorMessage","addComment","text","updateContent","body","className","children","fileName","_jsxFileName","lineNumber","columnNumber","submitLabel","handleSubmit","map","rootComment","comment","replies","id","_c","$RefreshReg$"],"sources":["/Users/minhyeok/Desktop/LostarkTodo/Front/src/comments/Comments.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { call } from \"../service/api-service\";\nimport './Comments.css';\nimport Comment from \"./Commnet\";\nimport CommentForm from \"./CommentForm\";\n\nconst Comments = () => {\n    const [backendComments, setBackendComments] = useState([]);\n    const [activeComment, setActiveComment] = useState(null);\n    const rootComments = backendComments.filter(\n        (backendComment) => backendComment.parentId === 0\n    );\n\n    const getReplies = (commentId) =>\n        backendComments\n            .filter((backendComment) => backendComment.parentId === commentId)\n            .sort(\n                (a, b) =>\n                    new Date(a.lastModifiedDate).getTime() - new Date(b.lastModifiedDate).getTime()\n            );\n\n    useEffect(() => {\n        // 초기 캐릭터 정보 불러오기\n        call(\"/comments\", \"GET\", null)\n            .then((response) => {\n                setBackendComments(response);\n            })\n            .catch((error) => { console.log(error.errorMessage) });\n    }, []);\n\n    const addComment = (text, parentId = null) => {\n        const updateContent = {\n            body: text,\n            parentId: parentId\n        };\n        call(\"/comments\", \"POST\", updateContent)\n            .then((response) => {\n                setBackendComments([response, ...response]);\n                setActiveComment(null);\n            })\n            .catch((error) => { console.log(error.errorMessage) });\n    };\n\n    return (\n        <div className=\"comments\">\n            <h3 className=\"comments-title\">Comments</h3>\n            <div className=\"comment-form-title\">Write comment</div>\n            <CommentForm submitLabel=\"Write\" handleSubmit={addComment} />\n            <div className=\"comments-container\">\n                {rootComments.map((rootComment) => (\n                    <Comment key={rootComment.id} comment={rootComment} replies={getReplies(rootComment.id)} />\n                ))}\n\n            </div>\n        </div>\n    );\n};\n\nexport default Comments;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,IAAI,QAAQ,wBAAwB;AAC7C,OAAO,gBAAgB;AACvB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAMa,YAAY,GAAGJ,eAAe,CAACK,MAAM,CACtCC,cAAc,IAAKA,cAAc,CAACC,QAAQ,KAAK,CACpD,CAAC;EAED,MAAMC,UAAU,GAAIC,SAAS,IACzBT,eAAe,CACVK,MAAM,CAAEC,cAAc,IAAKA,cAAc,CAACC,QAAQ,KAAKE,SAAS,CAAC,CACjEC,IAAI,CACD,CAACC,CAAC,EAAEC,CAAC,KACD,IAAIC,IAAI,CAACF,CAAC,CAACG,gBAAgB,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,IAAIF,IAAI,CAACD,CAAC,CAACE,gBAAgB,CAAC,CAACC,OAAO,CAAC,CACtF,CAAC;EAETvB,SAAS,CAAC,MAAM;IACZ;IACAC,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC,CACzBuB,IAAI,CAAEC,QAAQ,IAAK;MAChBhB,kBAAkB,CAACgB,QAAQ,CAAC;IAChC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAAEC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,YAAY,CAAC;IAAC,CAAC,CAAC;EAC9D,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,UAAU,GAAGA,CAACC,IAAI,EAAEjB,QAAQ,GAAG,IAAI,KAAK;IAC1C,MAAMkB,aAAa,GAAG;MAClBC,IAAI,EAAEF,IAAI;MACVjB,QAAQ,EAAEA;IACd,CAAC;IACDd,IAAI,CAAC,WAAW,EAAE,MAAM,EAAEgC,aAAa,CAAC,CACnCT,IAAI,CAAEC,QAAQ,IAAK;MAChBhB,kBAAkB,CAAC,CAACgB,QAAQ,EAAE,GAAGA,QAAQ,CAAC,CAAC;MAC3Cd,gBAAgB,CAAC,IAAI,CAAC;IAC1B,CAAC,CAAC,CACDe,KAAK,CAAEC,KAAK,IAAK;MAAEC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,YAAY,CAAC;IAAC,CAAC,CAAC;EAC9D,CAAC;EAED,oBACIzB,OAAA;IAAK8B,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACrB/B,OAAA;MAAI8B,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5CnC,OAAA;MAAK8B,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvDnC,OAAA,CAACF,WAAW;MAACsC,WAAW,EAAC,OAAO;MAACC,YAAY,EAAEX;IAAW;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7DnC,OAAA;MAAK8B,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAC9BxB,YAAY,CAAC+B,GAAG,CAAEC,WAAW,iBAC1BvC,OAAA,CAACH,OAAO;QAAsB2C,OAAO,EAAED,WAAY;QAACE,OAAO,EAAE9B,UAAU,CAAC4B,WAAW,CAACG,EAAE;MAAE,GAA1EH,WAAW,CAACG,EAAE;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA8D,CAC7F;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAED,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACjC,EAAA,CAlDID,QAAQ;AAAA0C,EAAA,GAAR1C,QAAQ;AAoDd,eAAeA,QAAQ;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}