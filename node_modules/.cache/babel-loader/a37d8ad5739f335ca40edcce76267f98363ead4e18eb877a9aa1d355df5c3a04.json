{"ast":null,"code":"import { API_BASE_URL } from \"../config/api-config\";\nexport function call(api, method, request) {\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  });\n\n  // 로컬 스토리지에서 ACCESS TOKEN 가져오기\n  const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n  if (accessToken && accessToken !== null) {\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\n  }\n  let options = {\n    headers: headers,\n    url: API_BASE_URL + api,\n    method: method\n  };\n  if (request) {\n    options.body = JSON.stringify(request);\n  }\n  return fetch(options.url, options).then(response => {\n    if (response.status === 200) {\n      return response.json();\n    } else if (response.status === 403) {\n      window.location.href = \"/login\";\n      throw response.json();\n    } else {\n      throw response.json();\n    }\n  }).catch(error => {\n    return error.then(errorMessage => {\n      throw errorMessage;\n    });\n  });\n}\nexport function login(userDTO) {\n  return call(\"/auth/login\", \"POST\", userDTO).then(response => {\n    if (response.token) {\n      // 로컬 스토리지에 토큰 저장\n      localStorage.setItem(\"ACCESS_TOKEN\", response.token);\n      // token이 존재하는 경우 Todo 화면으로 리디렉트\n      window.location.href = \"/\";\n    }\n  });\n}\nexport function logout() {\n  call(\"/auth/logout\", \"GET\", null).then(response => {});\n  localStorage.setItem(\"ACCESS_TOKEN\", null);\n  window.location.href = \"/login\";\n}\nexport async function signup(userDTO) {\n  try {\n    const response = await call(\"/member/signup\", \"POST\", userDTO);\n    if (!response.ok) {\n      throw new Error(\"Signup request failed\");\n    }\n    const data = await response.json();\n    return data; // This assumes that the server responds with JSON data\n  } catch (error) {\n    // Handle any errors that occurred during the fetch or processing of data\n    console.error(\"Error in signup:\", error);\n    throw error; // Rethrow the error so that the caller can handle it\n  }\n}\n\nexport function socialLogin(provider) {\n  const frontendUrl = window.location.protocol + \"//\" + window.location.host;\n  window.location.href = API_BASE_URL + \"/auth/authorize/\" + provider + \"?redirect_url=\" + frontendUrl;\n}","map":{"version":3,"names":["API_BASE_URL","call","api","method","request","headers","Headers","accessToken","localStorage","getItem","append","options","url","body","JSON","stringify","fetch","then","response","status","json","window","location","href","catch","error","errorMessage","login","userDTO","token","setItem","logout","signup","ok","Error","data","console","socialLogin","provider","frontendUrl","protocol","host"],"sources":["/Users/minhyeok/Desktop/LostarkTodo/Front/src/service/api-service.jsx"],"sourcesContent":["import { API_BASE_URL } from \"../config/api-config\";\n\nexport function call(api, method, request) {\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\",\n  });\n\n  // 로컬 스토리지에서 ACCESS TOKEN 가져오기\n  const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n  if (accessToken && accessToken !== null) {\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\n  }\n\n  let options = {\n    headers: headers,\n    url: API_BASE_URL + api,\n    method: method,\n  };\n\n  if (request) {\n    options.body = JSON.stringify(request);\n  }\n\n  return fetch(options.url, options).then((response) => {\n    if (response.status === 200) {\n      return response.json();\n    } else if (response.status === 403) {\n      window.location.href = \"/login\";\n      throw response.json();\n    } else {\n      throw response.json();\n    }\n  }).catch((error) => {\n    return error.then((errorMessage) => {\n      throw errorMessage;\n    });\n  });\n}\n\nexport function login(userDTO) {\n  return call(\"/auth/login\", \"POST\", userDTO)\n    .then((response) => {\n      if (response.token) {\n        // 로컬 스토리지에 토큰 저장\n        localStorage.setItem(\"ACCESS_TOKEN\", response.token);\n        // token이 존재하는 경우 Todo 화면으로 리디렉트\n        window.location.href = \"/\";\n      }\n    });\n}\n\nexport function logout() {\n  call(\"/auth/logout\", \"GET\", null).then((response) => {});\n  localStorage.setItem(\"ACCESS_TOKEN\", null);\n  window.location.href = \"/login\";\n}\n\nexport async function signup(userDTO) {\n  try {\n    const response = await call(\"/member/signup\", \"POST\", userDTO);\n\n    if (!response.ok) {\n      throw new Error(\"Signup request failed\");\n    }\n\n    const data = await response.json();\n    return data; // This assumes that the server responds with JSON data\n  } catch (error) {\n    // Handle any errors that occurred during the fetch or processing of data\n    console.error(\"Error in signup:\", error);\n    throw error; // Rethrow the error so that the caller can handle it\n  }\n}\n\nexport function socialLogin(provider) {\n  const frontendUrl = window.location.protocol + \"//\" + window.location.host;\n  window.location.href = API_BASE_URL + \"/auth/authorize/\" + provider + \"?redirect_url=\" + frontendUrl;\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}