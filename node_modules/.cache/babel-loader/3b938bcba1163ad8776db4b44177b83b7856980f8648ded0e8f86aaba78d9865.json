{"ast":null,"code":"var _jsxFileName = \"/Users/minhyeok/Desktop/LostarkTodo/Front/src/comments/Comments.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { call } from \"../service/api-service\";\nimport './Comments.css';\nimport Comment from \"./Commnet\";\nimport CommentForm from \"./CommentForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comments = () => {\n  _s();\n  const [backendComments, setBackendComments] = useState([]);\n  const [currentUsername, setCurrentUsername] = useState([]);\n  const [activeComment, setActiveComment] = useState(null);\n  const rootComments = backendComments.filter(backendComment => backendComment.parentId === 0);\n  const getReplies = commentId => backendComments.filter(backendComment => backendComment.parentId === commentId).sort((a, b) => new Date(a.lastModifiedDate).getTime() - new Date(b.lastModifiedDate).getTime());\n  useEffect(() => {\n    call(\"/member\", \"GET\", null).then(response => {\n      setCurrentUsername(response.username);\n    }).catch(error => {\n      console.log(error.errorMessage);\n    });\n    // 초기 캐릭터 정보 불러오기\n    call(\"/comments\", \"GET\", null).then(response => {\n      setBackendComments(response);\n    }).catch(error => {\n      console.log(error.errorMessage);\n    });\n  }, []);\n  const addComment = (text, parentId = null) => {\n    const updateContent = {\n      body: text,\n      parentId: parentId\n    };\n    call(\"/comments\", \"POST\", updateContent).then(response => {\n      setBackendComments(response);\n      setActiveComment(null);\n    }).catch(error => {\n      console.log(error.errorMessage);\n    });\n  };\n  const updateComment = (text, commentId) => {\n    const updateContent = {\n      body: text,\n      id: commentId\n    };\n    call(\"/comments\", \"PATCH\", updateContent).then(response => {\n      setBackendComments(response);\n      setActiveComment(null);\n    }).catch(error => {\n      console.log(error.errorMessage);\n    });\n  };\n  const deleteComment = commentId => {\n    const updateContent = {\n      id: commentId\n    };\n    if (window.confirm(\"Are you sure you want to remove comment?\")) {\n      call(\"/comments\", \"DELETE\", updateContent).then(response => {\n        setBackendComments(response);\n      }).catch(error => {\n        console.log(error.errorMessage);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"comments-title\",\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-form-title\",\n      children: \"Write comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n      submitLabel: \"Write\",\n      handleSubmit: addComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-container\",\n      children: rootComments.map(rootComment => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: rootComment,\n        replies: getReplies(rootComment.id),\n        activeComment: activeComment,\n        setActiveComment: setActiveComment,\n        addComment: addComment,\n        deleteComment: deleteComment,\n        updateComment: updateComment,\n        currentUsername: currentUsername\n      }, rootComment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(Comments, \"FVFx9tXYgbW533PIh0JizN5s0h0=\");\n_c = Comments;\nexport default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useState","useEffect","call","Comment","CommentForm","jsxDEV","_jsxDEV","Comments","_s","backendComments","setBackendComments","currentUsername","setCurrentUsername","activeComment","setActiveComment","rootComments","filter","backendComment","parentId","getReplies","commentId","sort","a","b","Date","lastModifiedDate","getTime","then","response","username","catch","error","console","log","errorMessage","addComment","text","updateContent","body","updateComment","id","deleteComment","window","confirm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","submitLabel","handleSubmit","map","rootComment","comment","replies","_c","$RefreshReg$"],"sources":["/Users/minhyeok/Desktop/LostarkTodo/Front/src/comments/Comments.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { call } from \"../service/api-service\";\nimport './Comments.css';\nimport Comment from \"./Commnet\";\nimport CommentForm from \"./CommentForm\";\n\nconst Comments = () => {\n    const [backendComments, setBackendComments] = useState([]);\n    const [currentUsername, setCurrentUsername] = useState([]);\n    const [activeComment, setActiveComment] = useState(null);\n    const rootComments = backendComments.filter(\n        (backendComment) => backendComment.parentId === 0\n    );\n    const getReplies = (commentId) =>\n        backendComments\n            .filter((backendComment) => backendComment.parentId === commentId)\n            .sort(\n                (a, b) =>\n                    new Date(a.lastModifiedDate).getTime() - new Date(b.lastModifiedDate).getTime()\n            );\n\n    useEffect(() => {\n        call(\"/member\", \"GET\", null)\n            .then((response) => {\n                setCurrentUsername(response.username);\n            })\n            .catch((error) => { console.log(error.errorMessage) });\n        // 초기 캐릭터 정보 불러오기\n        call(\"/comments\", \"GET\", null)\n            .then((response) => {\n                setBackendComments(response);\n            })\n            .catch((error) => { console.log(error.errorMessage) });\n\n    }, []);\n\n    const addComment = (text, parentId = null) => {\n        const updateContent = {\n            body: text,\n            parentId: parentId\n        };\n        call(\"/comments\", \"POST\", updateContent)\n            .then((response) => {\n                setBackendComments(response);\n                setActiveComment(null);\n            })\n            .catch((error) => { console.log(error.errorMessage) });\n    };\n\n    const updateComment = (text, commentId) => {\n        const updateContent = {\n            body: text,\n            id: commentId\n        };\n        call(\"/comments\", \"PATCH\", updateContent)\n            .then((response) => {\n                setBackendComments(response);\n                setActiveComment(null);\n            })\n            .catch((error) => {\n                console.log(error.errorMessage)\n            });\n    };\n\n    const deleteComment = (commentId) => {\n        const updateContent = {\n            id: commentId,\n        };\n        if (window.confirm(\"Are you sure you want to remove comment?\")) {\n            call(\"/comments\", \"DELETE\", updateContent)\n                .then((response) => {\n                    setBackendComments(response);\n                })\n                .catch((error) => { console.log(error.errorMessage) });\n        }\n    };\n\n    return (\n        <div className=\"comments\">\n            <h3 className=\"comments-title\">Comments</h3>\n            <div className=\"comment-form-title\">Write comment</div>\n            <CommentForm submitLabel=\"Write\" handleSubmit={addComment} />\n            <div className=\"comments-container\">\n                {rootComments.map((rootComment) => (\n                    <Comment\n                        key={rootComment.id}\n                        comment={rootComment}\n                        replies={getReplies(rootComment.id)}\n                        activeComment={activeComment}\n                        setActiveComment={setActiveComment}\n                        addComment={addComment}\n                        deleteComment={deleteComment}\n                        updateComment={updateComment}\n                        currentUsername={currentUsername}\n                    />\n                ))}\n\n            </div>\n        </div>\n    );\n};\n\nexport default Comments;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}